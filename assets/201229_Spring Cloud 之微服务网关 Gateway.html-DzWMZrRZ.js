import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as e,o as i}from"./app-BsnKshpw.js";const l={};function p(r,n){return i(),s("div",null,n[0]||(n[0]=[e(`<blockquote><p>Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，比 Netflix 的 Zuul 组件更加适合 Spring Cloud体系</p><p>大家一定要多看官方文档啊！！文档比我详细多了，本文只是一些简单的应用</p></blockquote><h2 id="为什么要用网关" tabindex="-1"><a class="header-anchor" href="#为什么要用网关"><span>为什么要用网关</span></a></h2><p>网关是介于客户端和服务器之间的一层，外部请求会先经过网关这一层再转发到其他功能模块中</p><p>所以，我们可以在网关上进行鉴权、监控等操作，让业务模块更加专注于业务</p><ul><li>只将网关对外暴露，隐藏微服务真实地址，保护微服务</li><li>在网关中进行鉴权操作，无须在业务代码中鉴权</li><li>避免了客户端和微服务直接接触 （ 在微服务变更时，重构难度会变大 ）</li></ul><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h3><p>网关本质上也是一个微服务，也需要在注册中心注册</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependencies&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关代码" tabindex="-1"><a class="header-anchor" href="#相关代码"><span>相关代码</span></a></h3><p>启动类代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@SpringBootApplication</span></span>
<span class="line"><span>@EnableDiscoveryClient</span></span>
<span class="line"><span>public class GatewayApplication {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        SpringApplication.run(GatewayApplication.class, args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yml 配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server:</span></span>
<span class="line"><span>  port: 10011</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: gateway</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      discovery:</span></span>
<span class="line"><span>        locator:</span></span>
<span class="line"><span>          enabled: true  # 是否要通过服务中心自动根据 serviceId 创建路由</span></span>
<span class="line"><span>          lower-case-service-id: true  #是否将服务id转换为小写</span></span>
<span class="line"><span>eureka:</span></span>
<span class="line"><span>  client:</span></span>
<span class="line"><span>    service-url:</span></span>
<span class="line"><span>      defaultZone: http://127.0.0.1:10010/eureka/</span></span>
<span class="line"><span>logging:</span></span>
<span class="line"><span>  level:</span></span>
<span class="line"><span>    org.springframework.cloud.gateway: debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><h4 id="是否正确代理" tabindex="-1"><a class="header-anchor" href="#是否正确代理"><span>是否正确代理</span></a></h4><p>网关转发的语法为<code>网关地址:端口/服务中心注册serviceId/具体的url</code></p><p>我们通过访问 <a href="http://localhost:10011/feign-provider/user/info" target="_blank" rel="noopener noreferrer">http://localhost:10011/feign-provider/user/info</a> 发现可以得到正确结果</p><p><em>feign-provider 是之前文章中创建的一个服务提供方</em></p><h4 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h4><p>复制一份 provider 的启动配置并且对返回值进行适当的修改，我们可以看到不同的结果是交替出现的</p><h2 id="路由规则匹配" tabindex="-1"><a class="header-anchor" href="#路由规则匹配"><span>路由规则匹配</span></a></h2><p>我们现在知道了 gateway 自动根据 serviceId 创建路由的方式，但是怎么自定义路由规则呢</p><p>我们需要先清楚三个概念</p><ul><li>Route（路由）：它由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配。</li><li>Predicate（断言）：这是一个 Java 8 的 Predicate。输入类型是一个 ServerWebExchange。我们可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。</li><li>Filter（过滤器）：GatewayFilter的实例，我们可以使用它修改请求和响应。</li></ul><p><em><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#glossary" target="_blank" rel="noopener noreferrer">上述概念原文地址</a>，我是可耻的搬运工</em></p><h3 id="简单实现" tabindex="-1"><a class="header-anchor" href="#简单实现"><span>简单实现</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server:</span></span>
<span class="line"><span>  port: 10011</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: gateway</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      routes:</span></span>
<span class="line"><span>        - id: provider-service  # 路由的唯一Id</span></span>
<span class="line"><span>          uri: https://github.com/  # 目标服务地址</span></span>
<span class="line"><span>          predicates:  # 路由条件，接受一个输入参数，返回一个布尔值结果</span></span>
<span class="line"><span>            - Path=/logycoconut</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置的意思是：配置了一个名为<code>provider-service</code>的规则，当访问地址<code>http://localhost:10011/logycoconut</code>时会自动转发到地址<code>https://github.com/logycoconut</code></p><p>这是路由匹配规则的一种，还有其他的可以参照文档，包括通过时间、Cookie、请求方式、请求参数等匹配</p><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories" target="_blank" rel="noopener noreferrer">路由规则拓展</a></p><h2 id="gateway-中的-filter" tabindex="-1"><a class="header-anchor" href="#gateway-中的-filter"><span>Gateway 中的 Filter</span></a></h2><h3 id="简单实现-1" tabindex="-1"><a class="header-anchor" href="#简单实现-1"><span>简单实现</span></a></h3><h4 id="更改网关的配置文件" tabindex="-1"><a class="header-anchor" href="#更改网关的配置文件"><span>更改网关的配置文件</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server:</span></span>
<span class="line"><span>  port: 10011</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: gateway</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      discovery:</span></span>
<span class="line"><span>        locator:</span></span>
<span class="line"><span>          enabled: false  # 是否要通过服务中心自动根据 serviceId 创建路由</span></span>
<span class="line"><span>          lower-case-service-id: false  #是否将服务id转换为小写</span></span>
<span class="line"><span>      routes:</span></span>
<span class="line"><span>        - id: provider-service  # 路由的唯一Id</span></span>
<span class="line"><span>          uri: lb://feign-provider  # 目标服务地址</span></span>
<span class="line"><span>          predicates:  # 路由条件，接受一个输入参数，返回一个布尔值结果</span></span>
<span class="line"><span>            - Path=/user/info</span></span>
<span class="line"><span>          filters:</span></span>
<span class="line"><span>            - AddRequestParameter=name, zhangsan</span></span>
<span class="line"><span>eureka:</span></span>
<span class="line"><span>  client:</span></span>
<span class="line"><span>    service-url:</span></span>
<span class="line"><span>      defaultZone: http://127.0.0.1:10010/eureka/</span></span>
<span class="line"><span>logging:</span></span>
<span class="line"><span>  level:</span></span>
<span class="line"><span>    org.springframework.cloud.gateway: debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置的意思是：将符合路径<code>/user/info</code>的请求都添加了<code>name=zhangsan</code>的请求参数</p><p><code>lb://feign-provider</code>是Gateway Global Filter的一种运用，如果 URL 中具有 lb，就使用负载均衡客户端将 URL 解析成实际的地址加端口</p><h4 id="修改-provider-服务验证请求" tabindex="-1"><a class="header-anchor" href="#修改-provider-服务验证请求"><span>修改 provider 服务验证请求</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;user&quot;)</span></span>
<span class="line"><span>public class ProviderController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;info&quot;)</span></span>
<span class="line"><span>    public String info(String name) {</span></span>
<span class="line"><span>        return &quot;我叫张三，今年二十三&quot; + name;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关源码地址" tabindex="-1"><a class="header-anchor" href="#相关源码地址"><span>相关源码地址</span></a></h2><p>仅供参考</p><p><a href="https://github.com/logycoconut/Spring-Cloud-Notes/tree/master/gateway" target="_blank" rel="noopener noreferrer">https://github.com/logycoconut/Spring-Cloud-Notes/tree/master/gateway</a></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/" target="_blank" rel="noopener noreferrer">Spring Cloud Gateway官方文档</a></p><p><a href="https://www.jianshu.com/p/5e40bbc95eb9" target="_blank" rel="noopener noreferrer">spring cloud gateway 2 深入了解 - filter</a> 常用网关过滤器和全局过滤器介绍</p><p><a href="https://www.haoyizebo.com/posts/1e919f7d/" target="_blank" rel="noopener noreferrer">Spring Cloud Gateway 过滤器</a> 自定义过滤器</p>`,46)]))}const c=a(l,[["render",p],["__file","201229_Spring Cloud 之微服务网关 Gateway.html.vue"]]),o=JSON.parse(`{"path":"/archive/blog/2020/201229_Spring%20Cloud%20%E4%B9%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%20Gateway.html","title":"Spring Cloud 之微服务网关 Gateway","lang":"zh-CN","frontmatter":{"title":"Spring Cloud 之微服务网关 Gateway","date":"2020-12-29T03:03:06.000Z","draft":false,"category":["关于技术"],"tag":["SpringCloud"],"description":"Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，比 Netflix 的 Zuul 组件更加适合 Spring Cloud体系 大家一定要多看官方文档啊！！文档比我详细多了，本文只是一些简单的应用 为什么要用网关 网关是介于客户端和服务器之间的一层，外部请求会先经过网关这一层再转发到其他功能模块中 所以，我们可...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/archive/blog/2020/201229_Spring%20Cloud%20%E4%B9%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%20Gateway.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Spring Cloud 之微服务网关 Gateway"}],["meta",{"property":"og:description","content":"Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，比 Netflix 的 Zuul 组件更加适合 Spring Cloud体系 大家一定要多看官方文档啊！！文档比我详细多了，本文只是一些简单的应用 为什么要用网关 网关是介于客户端和服务器之间的一层，外部请求会先经过网关这一层再转发到其他功能模块中 所以，我们可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:published_time","content":"2020-12-29T03:03:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Cloud 之微服务网关 Gateway\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-29T03:03:06.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"为什么要用网关","slug":"为什么要用网关","link":"#为什么要用网关","children":[]},{"level":2,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[{"level":3,"title":"添加依赖","slug":"添加依赖","link":"#添加依赖","children":[]},{"level":3,"title":"相关代码","slug":"相关代码","link":"#相关代码","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[{"level":4,"title":"是否正确代理","slug":"是否正确代理","link":"#是否正确代理","children":[]},{"level":4,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]}]}]},{"level":2,"title":"路由规则匹配","slug":"路由规则匹配","link":"#路由规则匹配","children":[{"level":3,"title":"简单实现","slug":"简单实现","link":"#简单实现","children":[]}]},{"level":2,"title":"Gateway 中的 Filter","slug":"gateway-中的-filter","link":"#gateway-中的-filter","children":[{"level":3,"title":"简单实现","slug":"简单实现-1","link":"#简单实现-1","children":[{"level":4,"title":"更改网关的配置文件","slug":"更改网关的配置文件","link":"#更改网关的配置文件","children":[]},{"level":4,"title":"修改 provider 服务验证请求","slug":"修改-provider-服务验证请求","link":"#修改-provider-服务验证请求","children":[]}]}]},{"level":2,"title":"相关源码地址","slug":"相关源码地址","link":"#相关源码地址","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1667915485000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"1425795337@qq.com","commits":1,"url":"https://github.com/logycoconut"},{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":4,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":3.71,"words":1114},"filePathRelative":"archive/blog/2020/201229_Spring Cloud 之微服务网关 Gateway.md","localizedDate":"2020年12月29日","autoDesc":true}`);export{c as comp,o as data};
