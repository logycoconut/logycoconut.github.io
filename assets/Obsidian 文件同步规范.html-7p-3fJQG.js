import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as o,o as a}from"./app-DfvBXUGl.js";const n={};function r(l,t){return a(),i("div",null,t[0]||(t[0]=[o('<h1 id="obsidian-文件同步规范" tabindex="-1"><a class="header-anchor" href="#obsidian-文件同步规范"><span>Obsidian 文件同步规范</span></a></h1><p>这篇文章的初衷非常简单<br> 在长时间的 Obsidian 使用过程中（或者说知识库构建过程中），Git 在其中只是扮演了文件同步的角色<br> 但是 Git 本身是一个非常优秀的版本控制工具<br> 那么，是否需要以一种规范的方式来管理我的文档？就像管理代码一样？</p><p>答案是肯定的，规范使用 Git 能够让提交记录更清晰，清楚地看到每一次提交做出的改变</p><p>这里可以参考一份 Git 规范，<em><strong><a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/" target="_blank" rel="noopener noreferrer">AngularJS Git Commit Message Conventions</a></strong></em><br><em><strong>Angular 规范</strong></em> 将一次 Commit 信息分为 Header、Body、Footer 三部分<br> 对于文档管理来说，只使用 Header 部分就足以表明本次改动的内容了</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><p><strong>举个例子</strong></p><ul><li>feat：新笔记</li><li>fix: 对笔记内容进行比较大的修改</li><li>refactor：对笔记内容进行修饰</li><li>style：对笔记格式进行修改</li><li>chore：Obsidian 的插件、主题更新</li></ul>',7)]))}const d=e(n,[["render",r],["__file","Obsidian 文件同步规范.html.vue"]]),p=JSON.parse(`{"path":"/area/lifestyle/Obsidian%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Obsidian%20%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html","title":"Obsidian 文件同步规范","lang":"zh-CN","frontmatter":{"title":"Obsidian 文件同步规范","tags":["Obsidian"],"date":"2024-12-06T00:00:00.000Z","description":"Obsidian 文件同步规范 这篇文章的初衷非常简单 在长时间的 Obsidian 使用过程中（或者说知识库构建过程中），Git 在其中只是扮演了文件同步的角色 但是 Git 本身是一个非常优秀的版本控制工具 那么，是否需要以一种规范的方式来管理我的文档？就像管理代码一样？ 答案是肯定的，规范使用 Git 能够让提交记录更清晰，清楚地看到每一次提交做...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/area/lifestyle/Obsidian%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Obsidian%20%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Obsidian 文件同步规范"}],["meta",{"property":"og:description","content":"Obsidian 文件同步规范 这篇文章的初衷非常简单 在长时间的 Obsidian 使用过程中（或者说知识库构建过程中），Git 在其中只是扮演了文件同步的角色 但是 Git 本身是一个非常优秀的版本控制工具 那么，是否需要以一种规范的方式来管理我的文档？就像管理代码一样？ 答案是肯定的，规范使用 Git 能够让提交记录更清晰，清楚地看到每一次提交做..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"Obsidian"}],["meta",{"property":"article:published_time","content":"2024-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Obsidian 文件同步规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[],"git":{"createdTime":1733484597000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":2,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"area/lifestyle/Obsidian 使用指南/Obsidian 文件同步规范.md","localizedDate":"2024年12月6日","autoDesc":true}`);export{d as comp,p as data};
