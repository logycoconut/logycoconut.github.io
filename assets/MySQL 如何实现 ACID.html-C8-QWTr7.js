import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as i,o as c}from"./app-BsnKshpw.js";const n={};function a(l,o){return c(),t("div",null,o[0]||(o[0]=[i('<blockquote><p>针对 <code>InnoDB</code> 引擎</p></blockquote><p><code>ACID</code>（<code>Atomicity</code>，<code>Consistency</code>，<code>Isolation</code>， <code>Durability</code> ） 是关系型数据库的重要特性<br><code>MySQL</code> 也通过各种手段来实现了 <code>ACID</code></p><h3 id="isolation-隔离性" tabindex="-1"><a class="header-anchor" href="#isolation-隔离性"><span>Isolation 隔离性</span></a></h3><blockquote><p>解释：并发访问数据库时，一个事务不被其他事务干扰</p></blockquote><p>数据库中存在不同的隔离级别，不同的隔离级别也分别解决了脏读、不可重复读、幻读等问题</p><ul><li>读未提交</li><li>读提交 <code>RC</code></li><li>可重复读 <code>RR</code>（<code>InnoDB</code> 默认隔离级别）</li><li>串行化</li></ul><p><strong>读请求的隔离</strong></p><p>在 <code>RC</code>、<code>RR</code> 隔离级别下，<code>InnoDB</code> 引擎通过 <code>MVCC</code> 来实现事务间数据的</p><p><strong>写请求的隔离</strong></p><h3 id="atomicity-原子性" tabindex="-1"><a class="header-anchor" href="#atomicity-原子性"><span>Atomicity 原子性</span></a></h3><h3 id="durability-持久性" tabindex="-1"><a class="header-anchor" href="#durability-持久性"><span>Durability 持久性</span></a></h3><p>主要是靠 <code>redo log</code></p><p><code>redo log</code> 有两个特点</p><ul><li>大小固定，循环写</li><li>crash-safe</li></ul><p><code>MySQL</code> 中有一个 <code>WAL</code>（<code>Write-Ahead Logging</code>） 技术</p><p>当有记录更新时，InnoDB 引擎就会把记录写到 redo log 中并更新内存，这个时候更新已经完成</p><h3 id="consistency-一致性" tabindex="-1"><a class="header-anchor" href="#consistency-一致性"><span>Consistency 一致性</span></a></h3>',17)]))}const s=e(n,[["render",a],["__file","MySQL 如何实现 ACID.html.vue"]]),p=JSON.parse(`{"path":"/resource/MySQL%20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%20ACID.html","title":"MySQL 如何实现 ACID","lang":"zh-CN","frontmatter":{"title":"MySQL 如何实现 ACID","tag":["MySQL"],"description":"针对 InnoDB 引擎 ACID（Atomicity，Consistency，Isolation， Durability ） 是关系型数据库的重要特性 MySQL 也通过各种手段来实现了 ACID Isolation 隔离性 解释：并发访问数据库时，一个事务不被其他事务干扰 数据库中存在不同的隔离级别，不同的隔离级别也分别解决了脏读、不可重复读、幻读...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/MySQL%20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%20ACID.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"MySQL 如何实现 ACID"}],["meta",{"property":"og:description","content":"针对 InnoDB 引擎 ACID（Atomicity，Consistency，Isolation， Durability ） 是关系型数据库的重要特性 MySQL 也通过各种手段来实现了 ACID Isolation 隔离性 解释：并发访问数据库时，一个事务不被其他事务干扰 数据库中存在不同的隔离级别，不同的隔离级别也分别解决了脏读、不可重复读、幻读..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 如何实现 ACID\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"Isolation 隔离性","slug":"isolation-隔离性","link":"#isolation-隔离性","children":[]},{"level":3,"title":"Atomicity 原子性","slug":"atomicity-原子性","link":"#atomicity-原子性","children":[]},{"level":3,"title":"Durability 持久性","slug":"durability-持久性","link":"#durability-持久性","children":[]},{"level":3,"title":"Consistency 一致性","slug":"consistency-一致性","link":"#consistency-一致性","children":[]}],"git":{"createdTime":1703258581000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":3,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":0.82,"words":246},"filePathRelative":"resource/MySQL 如何实现 ACID.md","localizedDate":"2023年12月22日","autoDesc":true}`);export{s as comp,p as data};
