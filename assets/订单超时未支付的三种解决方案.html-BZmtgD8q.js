import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as a,o as r}from"./app-CDs18hrd.js";const c={};function n(l,t){return r(),o("div",null,t[0]||(t[0]=[a('<blockquote><p>用户下单之后未支付，需要实现超时自动取消订单</p></blockquote><h3 id="懒删除" tabindex="-1"><a class="header-anchor" href="#懒删除"><span>懒删除</span></a></h3><p>不用自动更新订单状态，而是在再一次查询订单状态时发现订单超时，这时候才去更新订单状态为「已超时」</p><h3 id="扫表轮训" tabindex="-1"><a class="header-anchor" href="#扫表轮训"><span>扫表轮训</span></a></h3><p>较为常用的一种方案</p><p>如果对于实时性要求不高的话可以采用这种方案</p><p>通过一个定时任务，例如间隔 5 秒查询最近 30 分钟创建的订单，如果发现「未支付」的订单，则更新为「已超时」</p><h3 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列"><span>延迟队列</span></a></h3><ul><li><p>像 RocketMQ 之类的消息队列都提供了延迟队列的能力，可以在用户下单的同时发送一个「用户订单超时确认」的消息，在指定时间后消费，例如 10 秒，同时消费端做好业务处理</p></li><li><p>如果系统的 MQ 版本过老，可能没有延迟消费的能力，可以自己简单实现一个延迟服务，通过时间轮的方式</p></li></ul>',9)]))}const s=e(c,[["render",n],["__file","订单超时未支付的三种解决方案.html.vue"]]),m=JSON.parse(`{"path":"/resource/code/%E5%9C%BA%E6%99%AF%E9%A2%98/01_%E7%94%B5%E5%95%86/%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E6%9C%AA%E6%94%AF%E4%BB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"订单超时未支付的三种解决方案","lang":"zh-CN","frontmatter":{"title":"订单超时未支付的三种解决方案","tag":["超时","订单","电商"],"description":"用户下单之后未支付，需要实现超时自动取消订单 懒删除 不用自动更新订单状态，而是在再一次查询订单状态时发现订单超时，这时候才去更新订单状态为「已超时」 扫表轮训 较为常用的一种方案 如果对于实时性要求不高的话可以采用这种方案 通过一个定时任务，例如间隔 5 秒查询最近 30 分钟创建的订单，如果发现「未支付」的订单，则更新为「已超时」 延迟队列 像 R...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/code/%E5%9C%BA%E6%99%AF%E9%A2%98/01_%E7%94%B5%E5%95%86/%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E6%9C%AA%E6%94%AF%E4%BB%98%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"订单超时未支付的三种解决方案"}],["meta",{"property":"og:description","content":"用户下单之后未支付，需要实现超时自动取消订单 懒删除 不用自动更新订单状态，而是在再一次查询订单状态时发现订单超时，这时候才去更新订单状态为「已超时」 扫表轮训 较为常用的一种方案 如果对于实时性要求不高的话可以采用这种方案 通过一个定时任务，例如间隔 5 秒查询最近 30 分钟创建的订单，如果发现「未支付」的订单，则更新为「已超时」 延迟队列 像 R..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"超时"}],["meta",{"property":"article:tag","content":"订单"}],["meta",{"property":"article:tag","content":"电商"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"订单超时未支付的三种解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"懒删除","slug":"懒删除","link":"#懒删除","children":[]},{"level":3,"title":"扫表轮训","slug":"扫表轮训","link":"#扫表轮训","children":[]},{"level":3,"title":"延迟队列","slug":"延迟队列","link":"#延迟队列","children":[]}],"git":{"createdTime":1680782317000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":6,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":0.94,"words":282},"filePathRelative":"resource/code/场景题/01_电商/订单超时未支付的三种解决方案.md","localizedDate":"2023年4月6日","autoDesc":true}`);export{s as comp,m as data};
