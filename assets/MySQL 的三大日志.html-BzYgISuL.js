import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as c,o as l}from"./app-BsnKshpw.js";const r={};function t(n,o){return l(),d("div",null,o[0]||(o[0]=[c('<blockquote><ul><li><a href="https://segmentfault.com/a/1190000023827696" target="_blank" rel="noopener noreferrer">必须了解的mysql三大日志-binlog、redo log和undo log</a><br> 文章写的太好了，值得反复观看</li></ul></blockquote><p><code>MySQL</code> 中存在各种日志（错误日志、查询日志、慢查询日志、事务日志、二进制日志等）<br> 本文重点关注 <code>binlog</code>, <code>redo log</code>, <code>undo log</code> 这三大常用日志</p><h2 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog"><span>binlog</span></a></h2><p>用于记录数据库执行的写入性操作（不包括查询信息 <code>select</code>），以二进制的形式保存在磁盘中</p><p><code>binlog</code> 是 <code>MySQL</code> 的逻辑日志，并且由 <code>Server</code> 层进行记录，使用任何存储引擎的 <code>MySQL</code> 数据库都会记录 <code>binlog</code> 日志</p><p><em>逻辑日志可以简单地理解为记录的就是 SQL 语句，而物理日志则具体的数据页变更</em></p><p><code>binlog</code> 通过追加的方式进行写入，可以通过参数设置每一个 <code>binlog</code> 文件的大小，当文件大小超过给定值之后，会生成新的文件来保存日志</p><h3 id="binlog-使用场景" tabindex="-1"><a class="header-anchor" href="#binlog-使用场景"><span>binlog 使用场景</span></a></h3><ul><li><strong>主从复制</strong>：从 <code>Master</code> 端开启 <code>binlog</code>，然后将 <code>binlog</code> 发送到各个 <code>Slave</code> 端，<code>Slave</code> 重放 <code>binlog</code> 从而达到主从数据一致</li><li><strong>数据恢复</strong>：通过 <code>mysqlbinlog</code> 工具来恢复数据</li><li><strong>业务监控</strong>：通过监控 <code>binlog</code> 的变更来达到业务上的一些需求，比如说实时更新缓存值</li></ul><h3 id="binlog-刷盘时机" tabindex="-1"><a class="header-anchor" href="#binlog-刷盘时机"><span>binlog 刷盘时机</span></a></h3><p>对于 <code>InnoDB</code> 引擎来说，只有事务提交时才会记录 <code>bin log</code>，此时记录还在内存中</p><p><code>MySQL</code> 通过 <code>sync_binlog</code> 参数控制 <code>bin log</code> 的刷盘时机<br><code>sync_binlog</code> 参数的取值范围为 <code>0 ~ N</code></p><ul><li>0: 不强制要求，由系统判断何时写入磁盘</li><li>1: 每次 <code>commit</code> 的时候都要将 <code>bin log</code> 写入磁盘</li><li>N: 每 N 次事务才会将 <code>bin log</code> 写入磁盘</li></ul><p><em><code>sync_binlog</code> 最安全的设置是 1，而显而易见，N 越大数据库性能越高，可以酌情牺牲一定的一致性来获取更好的性能</em></p><h3 id="binlog-日志格式" tabindex="-1"><a class="header-anchor" href="#binlog-日志格式"><span>binlog 日志格式</span></a></h3><p><code>binlog</code> 有三中日志格式，分别为 <code>STATEMENT</code>、<code>ROW</code> 以及 <code>MIXED</code></p><ul><li><p><code>STATEMENT</code><br> 基于 <code>SQL</code> 语句的复制（<code>statement-based replication</code>，<code>SBR</code>），每一条会修改数据的 <code>SQL</code> 语句会记录到 <code>binlog</code> 中</p><ul><li>优点：不需要记录每一行的变化，可以有效减少 <code>bin log</code> 的日志量，节省 <code>IO</code></li><li>缺点：某些情况下会导致主从数据不一致，比如执行 <code>sysdate ()</code>、 <code>sleep ()</code> 等</li></ul></li><li><p><code>ROW</code><br> 基于行的复制 （<code>row-based replication</code>，<code>RBR</code>），仅记录哪条数据修改了，不记录每条 <code>SQL</code> 的上下文信息</p><ul><li>优点：针对存储过程、<code>function</code>、<code>trigger</code> 的调用和触发也能被正确复制</li><li>缺点：特定条件下会产生大量的日志，尤其是 <code>alter table</code> 时会让日志暴涨</li></ul></li><li><p><code>MIXED</code><br> 基于 <code>STATMENT</code> 和 <code>ROW</code> 两种模式的混合复制（<code>mix-based replication</code>，<code>MBR</code>）<br> 一般的复制使用 <code>STATEMENT</code> 模式保存 <code>bin log</code>，对于 <code>STATEMENT</code> 模式无法复制的操作使用 ROW <code>模式来保存</code> <code>binlog\b</code></p></li></ul><h2 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log"><span>redo log</span></a></h2><h3 id="为什么需要-redo-log" tabindex="-1"><a class="header-anchor" href="#为什么需要-redo-log"><span>为什么需要 redo log</span></a></h3><p>事务四大特性之一的<strong>持久性</strong>，只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态</p><p>那么，<code>MySQL</code> 是如何保证一致性的呢<br> 最简单的办法就是每次事务提交的时候，就将该事务涉及修改的数据页全部刷新到磁盘中</p><p>但是，显然这存在严重的性能问题</p><ul><li><code>InnoDB</code> 是以页为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，就太浪费资源了</li><li>一个事务可能涉及多个数据页，并且这些数据页在物理上并不连续，使用<strong>随机 <code>IO</code></strong> 写入性能太差</li></ul><p>因此，<code>MySQL</code> 设计了 <code>redo log</code>，用来记录事务对数据页做了哪些修改<br><em>文件更小且是顺序 IO</em></p><h3 id="redo-log-基本概念" tabindex="-1"><a class="header-anchor" href="#redo-log-基本概念"><span>redo log 基本概念</span></a></h3><p><code>redo log</code> 包含两部分</p><ul><li>内存中的日志缓冲 <code>redo log buffer</code></li><li>磁盘上的日志文件 <code>redo log file</code></li></ul><p><code>MySQL</code> 每执行一条 <code>DML</code> 语句，先将记录写入到 <code>redo log buffer</code>，后续某个时间点在一次性将多个操作记录写到 <code>redo log file</code><br><em>这种技术也就是 WAL (Write-Ahead Logging)</em></p><p>在计算机操作系统中，用户空间下的缓冲区数据一般情况下是无法直接写入磁盘的<br> 中间必须经过操作系统的内核空间缓冲区（<code>OS Buffer</code>）<br> 因此，<code>redo log buffer</code> 写入到 <code>redo log file </code> 的过程实际上是先写入 <code> OS buffer</code>，然后再通过系统调用 <code>fsync() </code> 将其刷到 <code> redo log file</code></p><p><code>MySQL</code> 支持三种将 r<code>edo log buffer</code> 写入到 <code>redo log file</code> 的时机，通过 <code>innodb_flush_log_at_trx_comit</code> 参数</p><ul><li><p><code>0</code>：延迟写<br> 事务提交时不会将 <code>redo log buffer</code> 中日志写入到 <code>os buffer</code> ，而是每秒写入 <code>os buffer</code> 并调用 <code>fsync()</code> 写入到 <code>redo log file</code> 中<br> 也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据</p></li><li><p><code>1</code>：实时写，实时刷<br> 事务每次提交都会将 <code>redo log buffer</code> 中的日志写入 <code>os buffer</code> 并调用 <code>fsync()</code> 刷到 <code>redo log file</code> 中<br> 这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO 的性能较差</p></li><li><p><code>2</code>：实时写，延迟刷<br> 每次提交都仅写入到 <code>os buffer</code> ，然后是每秒调用 <code>fsync()</code> 将 <code>os buffer</code> 中的日志写入到 <code>redo log file</code></p></li></ul><h3 id="redo-log-记录形式" tabindex="-1"><a class="header-anchor" href="#redo-log-记录形式"><span>redo log 记录形式</span></a></h3><p><code>redo log </code> 实际上记录的是数据页的变更<br> 这种变更是没有必要全部保存的（因为已经落盘了）<br> 所以，<code>redo log</code> 实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志<br><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/tech/20240105184931.png" alt="image.png" loading="lazy"></p><p>在 <code>innoDB</code> 中，既有 <code>redo log</code> 需要刷盘，还有<code>数据页</code>需要刷盘<br><code>redo log</code> 存在的意义主要就是降低对数据页刷盘的要求</p><p>在上图中，<code>write pos</code> 表示 <code>redo log</code> 当前记录的 <code>LSN</code> 位置<br><code>check point</code> 表示数据页更改记录刷盘后对应 <code>redo log</code> 所处的 <code>LSN</code> 位置<br><em>LSN：逻辑序列号，可以理解成不断递增的号码</em></p><p><code>write pos </code>和 <code>check point</code> 之间的部分就是 <code>redo log</code> 空着的部分，用于记录新的记录<br><code>check point</code> 到 <code>write pos</code> 是 <code>redo log</code> 待落盘的数据页更改记录<br> 当 <code>write pos</code> 追上 <code> check point</code> 时，会先推动 <code>check point</code> 向前移动，空出位置再记录新的日志</p><p>启动 <code>innoDB</code> 的时候，<strong>不管上次是正常关闭还是异常关闭，总是会进行恢复操作</strong><br> 因为 <code>redo log</code> 记录的是数据页的物理变化，因为恢复的时候速度比 <code>bin log</code> 逻辑日志要快很多</p><p>重启 <code>innoDB</code> 时，首先会检查磁盘中数据页的 <code>LSN</code>，如果数据页的 <code>LSN</code> 小于日志中的 <code>LSN</code>，则会从 <code>check point</code> 开始恢复<br> 还有一种情况，在宕机的时候正处于 <code>check point</code> 的刷盘过程，且数据页的刷盘进度超过了日志页的刷盘进度，此时会出现数据页中记录的 <code>LSN</code> 大于日志中的 <code>LSN</code>，这时超出日志进度的部分将不会恢复，因为这本身就表示已经做过的事情</p><h3 id="redo-log-和-binlog-的区别" tabindex="-1"><a class="header-anchor" href="#redo-log-和-binlog-的区别"><span>redo log 和 binlog 的区别</span></a></h3><table><thead><tr><th></th><th>redo log</th><th>binlog</th></tr></thead><tbody><tr><td>文件大小</td><td><code>redo log</code> 的大小是固定的</td><td><code>binlog</code> 可通过配置设置每个 <code>bin log</code> 的文件大小</td></tr><tr><td>实现方式</td><td><code>redo log</code> 是 <code>InnoDB</code> 引擎层实现的</td><td><code>binlog</code> 是 <code>Server</code> 层实现的</td></tr><tr><td>记录方式</td><td><code>redo log</code> 采用循环写的方式记录，当写在结尾时，会回到开头循环写日志</td><td><code>binlog</code> 通过追加的方式记录<br>当文件大小大于给定值后，后续的日志会记录到新的文件上</td></tr><tr><td>使用场景</td><td>适用于崩溃恢复（<code>crash-safe</code>）</td><td>适用于主从复制和数据恢复</td></tr></tbody></table><p>由上述区别可知</p><ul><li><code>binlog</code> 只用于归档，只依靠 <code>binlog</code> 是没有 <code>crash-safe</code> 能力的</li><li>只有 <code>redo log</code> 也是不行的，因为 <code>redo log</code> 是 <code>InnoDB</code> 引擎特有的，且日志上的记录落盘后会被覆盖掉</li><li>需要两者结合，同时记录，才能保证当数据库发生宕机重启时，数据不会丢失</li></ul><h2 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log"><span>undo log</span></a></h2><p><code>MySQL</code> 的原子性就是通过 <code>undo log</code> 来实现的</p><p>对于每一条 <code>insert</code> 语句，都对应着相对的 <code>delete</code> 语句；每一条 <code>update</code> 语句，也有相反的 <code>update</code> 语句</p><p>这样，在发生错误需要回滚时，就能恢复到事务之前的数据状态，保证了原子性</p><p><em><strong>同时，<code>undo log</code> 也是 <code>MVCC</code> 实现的关键～</strong></em></p><h2 id="redo-log的-crash-safe-能力" tabindex="-1"><a class="header-anchor" href="#redo-log的-crash-safe-能力"><span>redo log的 crash safe 能力</span></a></h2><blockquote><p>什么是 <code>crash safe</code> ?<br> 简单来说就是在 <code>MySQL</code> 发生 <code>crash</code> 后还能保证数据正确的能力</p></blockquote><p>我们都知道，<code>redo log</code> 只会记录未刷盘的日志，已经刷入磁盘的数据都会从 <code>redo log</code> 中删除（可能暂时存在）</p><p>借助 <code>check point</code> 和 <code>write pos</code> 就能判断出哪些数据是需要恢复的数据，从而将其恢复到内存中</p><p><em>这也解释了为什么 <code>binlog</code> 没有 <code>crash safe</code> 能力<br> 在 <code>binlog</code> 中，并没有一个标志可以判断哪些数据已经落盘，哪些还没有</em></p>',52)]))}const a=e(r,[["render",t],["__file","MySQL 的三大日志.html.vue"]]),p=JSON.parse(`{"path":"/project/Interview/MySQL/MySQL%20%E7%9A%84%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97.html","title":"MySQL 的三大日志","lang":"zh-CN","frontmatter":{"title":"MySQL 的三大日志","tag":["MySQL"],"description":"必须了解的mysql三大日志-binlog、redo log和undo log 文章写的太好了，值得反复观看 MySQL 中存在各种日志（错误日志、查询日志、慢查询日志、事务日志、二进制日志等） 本文重点关注 binlog, redo log, undo log 这三大常用日志 binlog 用于记录数据库执行的写入性操作（不包括查询信息 select...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/project/Interview/MySQL/MySQL%20%E7%9A%84%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"MySQL 的三大日志"}],["meta",{"property":"og:description","content":"必须了解的mysql三大日志-binlog、redo log和undo log 文章写的太好了，值得反复观看 MySQL 中存在各种日志（错误日志、查询日志、慢查询日志、事务日志、二进制日志等） 本文重点关注 binlog, redo log, undo log 这三大常用日志 binlog 用于记录数据库执行的写入性操作（不包括查询信息 select..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/tech/20240105184931.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL 的三大日志\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/tech/20240105184931.png\\"],\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"binlog","slug":"binlog","link":"#binlog","children":[{"level":3,"title":"binlog 使用场景","slug":"binlog-使用场景","link":"#binlog-使用场景","children":[]},{"level":3,"title":"binlog 刷盘时机","slug":"binlog-刷盘时机","link":"#binlog-刷盘时机","children":[]},{"level":3,"title":"binlog 日志格式","slug":"binlog-日志格式","link":"#binlog-日志格式","children":[]}]},{"level":2,"title":"redo log","slug":"redo-log","link":"#redo-log","children":[{"level":3,"title":"为什么需要 redo log","slug":"为什么需要-redo-log","link":"#为什么需要-redo-log","children":[]},{"level":3,"title":"redo log 基本概念","slug":"redo-log-基本概念","link":"#redo-log-基本概念","children":[]},{"level":3,"title":"redo log 记录形式","slug":"redo-log-记录形式","link":"#redo-log-记录形式","children":[]},{"level":3,"title":"redo log 和 binlog 的区别","slug":"redo-log-和-binlog-的区别","link":"#redo-log-和-binlog-的区别","children":[]}]},{"level":2,"title":"undo log","slug":"undo-log","link":"#undo-log","children":[]},{"level":2,"title":"redo log\\u001c的 crash safe 能力","slug":"redo-log的-crash-safe-能力","link":"#redo-log的-crash-safe-能力","children":[]}],"git":{"createdTime":1704455944000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":3,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":7.8,"words":2341},"filePathRelative":"project/Interview/MySQL/MySQL 的三大日志.md","localizedDate":"2024年1月5日","autoDesc":true}`);export{a as comp,p as data};
