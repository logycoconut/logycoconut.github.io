import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as s,o as i}from"./app-CDs18hrd.js";const l={};function t(p,a){return i(),n("div",null,a[0]||(a[0]=[s(`<h2 id="什么是-aws-lambda" tabindex="-1"><a class="header-anchor" href="#什么是-aws-lambda"><span>什么是 AWS Lambda</span></a></h2><h3 id="计算服务的演进" tabindex="-1"><a class="header-anchor" href="#计算服务的演进"><span>计算服务的演进</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230624223939.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>基础云架构 -&gt; 容器技术兴起 -&gt; Serverless 无服务器架构</strong></p><h3 id="aws-lambda-应运而生" tabindex="-1"><a class="header-anchor" href="#aws-lambda-应运而生"><span>AWS Lambda 应运而生</span></a></h3><blockquote><p>Serverless 的概念最早提出于 2008 年 (Google APP Engine)<br> 但直到 2014 年 Amazon 推出 AWS Lambda 才开始被关注</p></blockquote><p>Serverless, 字面意思是 &quot;无服务器&quot;</p><p>本质上 Serverless 依然属于云服务的范畴, 但是 Serverless 直接将传统云服务的 &quot;租算力&quot; 变成了 &quot;租服务&quot;</p><h4 id="aws-lambda-vs-aws-ec-2" tabindex="-1"><a class="header-anchor" href="#aws-lambda-vs-aws-ec-2"><span>AWS Lambda VS AWS EC 2</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619015052.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="lambda-优势" tabindex="-1"><a class="header-anchor" href="#lambda-优势"><span>Lambda 优势</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230620014235.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li><p>无需维护 (特指物理机器的维护)<br> 只关心你的代码, 不需要考虑服务器</p></li><li><p>天然高可用, 自动伸缩<br> 得益于 AWS 的高可用架构, Lambda 在监测到流量变大之后, 会自动扩展<br> 并且这一切都在处在账户的并发限制中, 不会无限制的扩张, 导致成本上升</p></li><li><p>按照调用付费, 降低成本, 不需要为闲置付费</p></li><li><p><strong>用自定义逻辑扩展其他 AWS 服务</strong></p></li></ul><h4 id="lambda-使用场景" tabindex="-1"><a class="header-anchor" href="#lambda-使用场景"><span>Lambda 使用场景</span></a></h4><table><thead><tr><th>AWS 组件</th><th>参考场景</th></tr></thead><tbody><tr><td>S 3</td><td>图片压缩、视频转码、内容审查</td></tr><tr><td>SQS</td><td>消息推送</td></tr><tr><td>DynamoDB</td><td>数据校验、筛选</td></tr><tr><td>API Gateway</td><td>微服务接口提供</td></tr><tr><td>...</td><td>...</td></tr></tbody></table><p>AWS Lambda 在 AWS 整个版图中占非常重要的位置</p><p>通过 Lambda 服务, 用户可以将 AWS 中的很多服务串在起来, 相互来调用</p><p><em>Lambda 提供了 17 个官方应用的触发器以及几十个三方的触发器 (通过 Event Bridge 触发)</em></p><h4 id="lambda-的收费标准" tabindex="-1"><a class="header-anchor" href="#lambda-的收费标准"><span><a href="https://aws.amazon.com/cn/lambda/pricing/" target="_blank" rel="noopener noreferrer">Lambda 的收费标准</a></span></a></h4><blockquote><p>使用 Lambda 的又一个很重要的理由</p></blockquote><p>Lambda 的调用十分便宜, 收费主要取决于两个因素</p><ul><li>为函数分配的内存量 (介于 128 MB - 10240 MB 之间)</li><li>函数的执行时间 (介于 1 s - 15 min 之间)</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619012957.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="lambda-编程模型、并发控制" tabindex="-1"><a class="header-anchor" href="#lambda-编程模型、并发控制"><span>Lambda 编程模型、并发控制</span></a></h2><h3 id="编程模型" tabindex="-1"><a class="header-anchor" href="#编程模型"><span>编程模型</span></a></h3><p><em>以 Java 语言为例</em><br><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619021142.png" alt="image.png" loading="lazy"></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.amazonaws&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;aws-lambda-java-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并发控制" tabindex="-1"><a class="header-anchor" href="#并发控制"><span><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-concurrency.html" target="_blank" rel="noopener noreferrer">并发控制</a></span></a></h3><p><strong>并发</strong>是 AWS Lambda 函数同时处理的正在进行的请求数</p><p>对于每个并发请求，Lambda 会预置单独的执行环境实例。当函数收到更多请求时，Lambda 会自动处理执行环境数量的扩展，直到达到账户的并发限制 (默认为单区域 1000), 并且也可以 <a href="http://aws.amazon.com/premiumsupport/knowledge-center/lambda-concurrency-limit-increase/" target="_blank" rel="noopener noreferrer">申请增加限额</a>，或者为关键函数增加单独并发控制</p><h4 id="预留并发" tabindex="-1"><a class="header-anchor" href="#预留并发"><span>预留并发</span></a></h4><p>预留并发保证了函数的最大并发实例数。当一个函数有预留并发时，任何其他函数都不可以使用该并发</p><h4 id="预置并发" tabindex="-1"><a class="header-anchor" href="#预置并发"><span>预置并发</span></a></h4><p>预配置并发可初始化请求数量的执行环境，使其准备好立即响应函数的调用。该配置会让账户<strong>产生费用</strong></p><h4 id="突增并发" tabindex="-1"><a class="header-anchor" href="#突增并发"><span>突增并发</span></a></h4><p>对于最初的流量突增，在一个区域中的累积并发数量可以达到 1000 (不同区域数量不同) 的初始级别</p><p>在初始突增之后，函数的并发可按每分钟增加 500 个实例的速度扩展。这将一直持续到有足够的实例来服务所有请求，或者直到达到并发限制。当请求进入的速度超过函数可扩展的速度，或者当函数处于最大并发时，其他请求会因限制错误而失败。</p><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619023009.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><em>请求减少，并且在空闲一段时间后，函数的未使用实例会停止。未使用的实例在等待请求时会被冻结，<strong>且不会产生任何费用</strong></em></p><h2 id="使用展示" tabindex="-1"><a class="header-anchor" href="#使用展示"><span>使用展示</span></a></h2><h3 id="简单-string-处理" tabindex="-1"><a class="header-anchor" href="#简单-string-处理"><span>简单 String 处理</span></a></h3><h3 id="使用-amazon-s-3-触发器创建缩略图" tabindex="-1"><a class="header-anchor" href="#使用-amazon-s-3-触发器创建缩略图"><span>使用 Amazon S 3 触发器创建缩略图</span></a></h3><ul><li>创建定义 Lambda 函数权限的 IAM Policy, 该函数必须具有以下权限 <ul><li>从指定 S 3 桶获取对象</li><li>将对象写入到指定 S 3 桶</li><li>将日志写入 Amazon CloudWatch Logs</li></ul></li></ul><p><em>具体策略 Json 如下:</em></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;Version&quot;: &quot;2012-10-17&quot;,</span></span>
<span class="line"><span>    &quot;Statement&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &quot;Effect&quot;: &quot;Allow&quot;,</span></span>
<span class="line"><span>            &quot;Action&quot;: [</span></span>
<span class="line"><span>                &quot;logs:PutLogEvents&quot;,</span></span>
<span class="line"><span>                &quot;logs:CreateLogGroup&quot;,</span></span>
<span class="line"><span>                &quot;logs:CreateLogStream&quot;</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;Resource&quot;: &quot;arn:aws:logs:*:*:*&quot;</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &quot;Effect&quot;: &quot;Allow&quot;,</span></span>
<span class="line"><span>            &quot;Action&quot;: [</span></span>
<span class="line"><span>                &quot;s3:GetObject&quot;</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;Resource&quot;: &quot;arn:aws:s3:::demo-lambda-practise/*&quot;</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &quot;Effect&quot;: &quot;Allow&quot;,</span></span>
<span class="line"><span>            &quot;Action&quot;: [</span></span>
<span class="line"><span>                &quot;s3:PutObject&quot;</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;Resource&quot;: &quot;arn:aws:s3:::demo-lambda-practise-resized/*&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过-api-gateway-进行参数传递" tabindex="-1"><a class="header-anchor" href="#通过-api-gateway-进行参数传递"><span>通过 API Gateway 进行参数传递</span></a></h3><p>模拟页面 crud 操作</p><p>_ <a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/configuration-envvars.html" target="_blank" rel="noopener noreferrer">环境变量</a> _</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/welcome.html" target="_blank" rel="noopener noreferrer">AWS Lambda 官方文档</a></p>`,50)]))}const o=e(l,[["render",t],["__file","01_AWS Lambda 入门.html.vue"]]),c=JSON.parse(`{"path":"/resource/code/10_cloud_tech/AWS/01_AWS%20Lambda%20%E5%85%A5%E9%97%A8.html","title":"AWS Lambda 入门","lang":"zh-CN","frontmatter":{"title":"AWS Lambda 入门","date":"2023-06-18T00:00:00.000Z","tag":["AWS","Serverless"],"description":"什么是 AWS Lambda 计算服务的演进 image.pngimage.png 基础云架构 -> 容器技术兴起 -> Serverless 无服务器架构 AWS Lambda 应运而生 Serverless 的概念最早提出于 2008 年 (Google APP Engine) 但直到 2014 年 Amazon 推出 AWS Lambda 才开始...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/code/10_cloud_tech/AWS/01_AWS%20Lambda%20%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"AWS Lambda 入门"}],["meta",{"property":"og:description","content":"什么是 AWS Lambda 计算服务的演进 image.pngimage.png 基础云架构 -> 容器技术兴起 -> Serverless 无服务器架构 AWS Lambda 应运而生 Serverless 的概念最早提出于 2008 年 (Google APP Engine) 但直到 2014 年 Amazon 推出 AWS Lambda 才开始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230624223939.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"AWS"}],["meta",{"property":"article:tag","content":"Serverless"}],["meta",{"property":"article:published_time","content":"2023-06-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AWS Lambda 入门\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230624223939.png\\",\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619015052.png\\",\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230620014235.png\\",\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619012957.png\\",\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619021142.png\\",\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619023009.png\\"],\\"datePublished\\":\\"2023-06-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"什么是 AWS Lambda","slug":"什么是-aws-lambda","link":"#什么是-aws-lambda","children":[{"level":3,"title":"计算服务的演进","slug":"计算服务的演进","link":"#计算服务的演进","children":[]},{"level":3,"title":"AWS Lambda 应运而生","slug":"aws-lambda-应运而生","link":"#aws-lambda-应运而生","children":[{"level":4,"title":"AWS Lambda VS AWS EC 2","slug":"aws-lambda-vs-aws-ec-2","link":"#aws-lambda-vs-aws-ec-2","children":[]},{"level":4,"title":"Lambda 优势","slug":"lambda-优势","link":"#lambda-优势","children":[]},{"level":4,"title":"Lambda 使用场景","slug":"lambda-使用场景","link":"#lambda-使用场景","children":[]},{"level":4,"title":"Lambda 的收费标准","slug":"lambda-的收费标准","link":"#lambda-的收费标准","children":[]}]}]},{"level":2,"title":"Lambda 编程模型、并发控制","slug":"lambda-编程模型、并发控制","link":"#lambda-编程模型、并发控制","children":[{"level":3,"title":"编程模型","slug":"编程模型","link":"#编程模型","children":[]},{"level":3,"title":"并发控制","slug":"并发控制","link":"#并发控制","children":[{"level":4,"title":"预留并发","slug":"预留并发","link":"#预留并发","children":[]},{"level":4,"title":"预置并发","slug":"预置并发","link":"#预置并发","children":[]},{"level":4,"title":"突增并发","slug":"突增并发","link":"#突增并发","children":[]}]}]},{"level":2,"title":"使用展示","slug":"使用展示","link":"#使用展示","children":[{"level":3,"title":"简单 String 处理","slug":"简单-string-处理","link":"#简单-string-处理","children":[]},{"level":3,"title":"使用 Amazon S 3 触发器创建缩略图","slug":"使用-amazon-s-3-触发器创建缩略图","link":"#使用-amazon-s-3-触发器创建缩略图","children":[]},{"level":3,"title":"通过 API Gateway 进行参数传递","slug":"通过-api-gateway-进行参数传递","link":"#通过-api-gateway-进行参数传递","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1687113414000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":8,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":3.63,"words":1088},"filePathRelative":"resource/code/10_cloud_tech/AWS/01_AWS Lambda 入门.md","localizedDate":"2023年6月18日","autoDesc":true}`);export{o as comp,c as data};
