import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as a,o}from"./app-DRDqcPuo.js";const n={};function l(s,e){return o(),i("div",null,e[0]||(e[0]=[a('<blockquote><p>【面试官：什么是 CAP 理论？为什么C.A.P 不能同时有？】 <a href="https://www.bilibili.com/video/BV1YM41197XX" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1YM41197XX</a></p></blockquote><p>分布式计算领域的公认定理</p><ul><li><p>C：Consistency</p></li><li><p>A： Availability</p></li><li><p>P： Partition Tolerance</p></li></ul><h4 id="分区容错性-partition-tolerance" tabindex="-1"><a class="header-anchor" href="#分区容错性-partition-tolerance"><span>分区容错性 Partition Tolerance</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;the system continues to operate despite arbitrary message loss or failure of part of the system&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个节点挂掉不影响另一个节点对外提供服务</p><p>也就是说<strong>分区容错性是分布式系统具备的基本能力</strong></p><h4 id="一致性-consistency" tabindex="-1"><a class="header-anchor" href="#一致性-consistency"><span>一致性 Consistency</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;all nodes see the same data at the same time&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一旦数据更新完成并成功返回客户端，那么所有节点在同一时间的数据完全一致</p><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/20231218142920.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>*为了实现 C 并不是因为锁阻塞，而是因为等待从节点返回的 <code>ack</code> 阻塞<br> 即使是单机架构多线程写的时候也要加锁，但是不用等待 <code>ack</code> 所以可以同时实现 CA</p><p><strong>存在的问题</strong></p><ol><li>由于存在数据同步的过程，写操作的响应会有一定的延迟（因为没有得到 <code>ACK</code> 响应）</li><li>为了保证数据一致性会对资源暂时锁定，带数据同步完成释放锁定资源，此时有请求对该数据的操作会阻塞</li></ol><h4 id="可用性-availability" tabindex="-1"><a class="header-anchor" href="#可用性-availability"><span>可用性 Availability</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;Reads and writes always succeed&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所有请求都有响应，且不会出现响应超时或响应错误</p><h3 id="为什么不能同时满足" tabindex="-1"><a class="header-anchor" href="#为什么不能同时满足"><span>为什么不能同时满足 ？</span></a></h3><p>因为存在分区间的网络或者其他问题，C 和 A 不能同时满足，除非不采用集群</p><ul><li><p>如果想满足 C（Consistency）<br> 假设现在成功往 A 节点写入数据，但是两节点间通信出现问题，最新数据同步不到 B 节点，那么为了满足一致性，其他往 B 节点发起的请求就不能得到响应，此时满足不了<strong>可用性</strong></p></li><li><p>如果想满足 A（Availability）<br> 假设现在成功往 A 节点写入数据，但是两节点间通信出现问题，最新数据同步不到 B 节点，那么为了满足可用性，其他往 B 节点发起的请求就会立即得到响应，返回未更新的旧数据，此时满足不了<strong>一致性</strong></p></li></ul>',20)]))}const p=t(n,[["render",l],["__file","CAP 理论.html.vue"]]),d=JSON.parse(`{"path":"/project/Interview/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/CAP%20%E7%90%86%E8%AE%BA.html","title":"CAP 理论","lang":"zh-CN","frontmatter":{"title":"CAP 理论","tag":["CAP"],"description":"【面试官：什么是 CAP 理论？为什么C.A.P 不能同时有？】 https://www.bilibili.com/video/BV1YM41197XX 分布式计算领域的公认定理 C：Consistency A： Availability P： Partition Tolerance 分区容错性 Partition Tolerance 一个节点挂掉不影...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/project/Interview/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/CAP%20%E7%90%86%E8%AE%BA.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"CAP 理论"}],["meta",{"property":"og:description","content":"【面试官：什么是 CAP 理论？为什么C.A.P 不能同时有？】 https://www.bilibili.com/video/BV1YM41197XX 分布式计算领域的公认定理 C：Consistency A： Availability P： Partition Tolerance 分区容错性 Partition Tolerance 一个节点挂掉不影..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/20231218142920.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"CAP"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CAP 理论\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/20231218142920.png\\"],\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":4,"title":"分区容错性 Partition Tolerance","slug":"分区容错性-partition-tolerance","link":"#分区容错性-partition-tolerance","children":[]},{"level":4,"title":"一致性 Consistency","slug":"一致性-consistency","link":"#一致性-consistency","children":[]},{"level":4,"title":"可用性 Availability","slug":"可用性-availability","link":"#可用性-availability","children":[]},{"level":3,"title":"为什么不能同时满足 ？","slug":"为什么不能同时满足","link":"#为什么不能同时满足","children":[]}],"git":{"createdTime":1702895606000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":2,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.84,"words":551},"filePathRelative":"project/Interview/分布式系统/CAP 理论.md","localizedDate":"2023年12月18日","autoDesc":true}`);export{p as comp,d as data};
