import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as s,o as t}from"./app-uPjeah--.js";const n={};function l(o,e){return t(),a("div",null,e[0]||(e[0]=[s(`<h2 id="rdb" tabindex="-1"><a class="header-anchor" href="#rdb"><span>RDB</span></a></h2><p>默认配置<br> 1 10 10000<br> 900 300 60</p><p>fork 一个子进程进行</p><h2 id="aof" tabindex="-1"><a class="header-anchor" href="#aof"><span>AOF</span></a></h2><p>记录所有的写入操作</p><p>统一都记录到 aof_buf 里面最后在写入 aof 文件中</p><p>appendfsync 配置</p><ul><li>always</li><li>everysec</li><li>no 由操作系统决定什么时候写入</li></ul><h2 id="aof-重写" tabindex="-1"><a class="header-anchor" href="#aof-重写"><span>AOF 重写</span></a></h2><p>用于以下场景</p><ul><li>精简多余操作</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>set key 1</span></span>
<span class="line"><span>set key 2</span></span>
<span class="line"><span>set key 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实最终结果就是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>set key 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>将多个指令合并为一个</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>rpush key1 1</span></span>
<span class="line"><span>rpush key1 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>rpush key1 1，2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是，在重写 AOF 的过程中，可能会有新的指令进来，所以需要一个 aof 重写缓冲区，把后来进来的写命令同时 copy 一份到重写缓冲区中<br> 在 aof 文件重写完成后，将 aof 重写缓冲区的命令再写入新的 aof 文件中，最后重命名新的 aof 文件，替换掉旧的 aof 文件</p><h3 id="aof-重写步骤" tabindex="-1"><a class="header-anchor" href="#aof-重写步骤"><span>AOF 重写步骤</span></a></h3><ol><li>fork 子进程进行重写工作</li><li>重写过程中如果有写命令，需要同时 copy 一份到 aof 重写缓冲区中</li><li>重写完成后，将 aof 重写缓冲区的命令写到新 aof 文件中</li><li>重命名新 aof 文件，替换掉旧的 aof 文件</li></ol><p><a href="https://www.cnblogs.com/xuanyuan/p/13689484.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xuanyuan/p/13689484.html</a></p>`,21)]))}const p=i(n,[["render",l],["__file","Redis 的持久化策略.html.vue"]]),c=JSON.parse(`{"path":"/resource/staged/SeniorDevelopment/Redis/Redis%20%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5.html","title":"Redis 的持久化策略","lang":"zh-CN","frontmatter":{"title":"Redis 的持久化策略","index":false,"date":"2023-03-28T00:00:00.000Z","tag":[],"description":"RDB 默认配置 1 10 10000 900 300 60 fork 一个子进程进行 AOF 记录所有的写入操作 统一都记录到 aof_buf 里面最后在写入 aof 文件中 appendfsync 配置 always everysec no 由操作系统决定什么时候写入 AOF 重写 用于以下场景 精简多余操作 其实最终结果就是 将多个指令合并为一个...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/staged/SeniorDevelopment/Redis/Redis%20%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Redis 的持久化策略"}],["meta",{"property":"og:description","content":"RDB 默认配置 1 10 10000 900 300 60 fork 一个子进程进行 AOF 记录所有的写入操作 统一都记录到 aof_buf 里面最后在写入 aof 文件中 appendfsync 配置 always everysec no 由操作系统决定什么时候写入 AOF 重写 用于以下场景 精简多余操作 其实最终结果就是 将多个指令合并为一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 的持久化策略\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"RDB","slug":"rdb","link":"#rdb","children":[]},{"level":2,"title":"AOF","slug":"aof","link":"#aof","children":[]},{"level":2,"title":"AOF 重写","slug":"aof-重写","link":"#aof-重写","children":[{"level":3,"title":"AOF 重写步骤","slug":"aof-重写步骤","link":"#aof-重写步骤","children":[]}]}],"git":{"createdTime":1680782317000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":6,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.07,"words":321},"filePathRelative":"resource/staged/SeniorDevelopment/Redis/Redis 的持久化策略.md","localizedDate":"2023年3月28日","autoDesc":true}`);export{p as comp,c as data};
