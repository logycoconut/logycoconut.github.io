import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as a,o as i}from"./app-uPjeah--.js";const l={};function p(t,n){return i(),s("div",null,n[0]||(n[0]=[a(`<blockquote><p>在 Web 开发中，我们经常需要对请求拦截并做一些动作，比如日志记录、权限检测或者性能检测等</p></blockquote><h2 id="handlerinterceptor" tabindex="-1"><a class="header-anchor" href="#handlerinterceptor"><span>HandlerInterceptor</span></a></h2><p>SpringMVC中提供了<code>HandlerInterceptor</code>接口, 我们来大致看一下它的源码 ( <strong>省略参数和异常以方便阅读</strong> )</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public interface HandlerInterceptor {</span></span>
<span class="line"><span>    // 请求处理之前调用, 当此方法返回true时才执行后续代码, 否则流程中断</span></span>
<span class="line"><span>    default boolean preHandle() { return true; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 请求处理之后调用</span></span>
<span class="line"><span>    default void postHandle() { }  </span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // 请求完成之后调用, 一般用于资源的清理</span></span>
<span class="line"><span>    default void afterCompletion() { }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="handlerinterceptoradapter" tabindex="-1"><a class="header-anchor" href="#handlerinterceptoradapter"><span>HandlerInterceptorAdapter</span></a></h2><p>有时候我们只需要在请求前拦截, 也就是只需要实现<code>preHandle</code>方法, 对于之后流程并不关心, 但是<code>HandlerInterceptor</code>接口需要我们同时实现三个接口, 所以Spring为我们提供了<code>HandlerInterceptorAdapter</code>类, 我们可以选择只复写需要的方法</p><p><strong>我们来看看源码 ( 省略参数和异常以方便阅读 )</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public abstract class HandlerInterceptorAdapter implements AsyncHandlerInterceptor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public boolean preHandle() { return true; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public void postHandle() {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public void afterCompletion() {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	@Override</span></span>
<span class="line"><span>	public void afterConcurrentHandlingStarted(){}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="权限检测场景" tabindex="-1"><a class="header-anchor" href="#权限检测场景"><span>权限检测场景</span></a></h2><p>项目中有些接口需要对请求方进行登录检测, 检测通过之后才能访问<br> 所以我们可能需要写一个登录的拦截器, 在请求处理之前进行检测</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 伪代码，主要是为了演示</span></span>
<span class="line"><span>public class LoginInterceptor extends HandlerInterceptorAdapter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {</span></span>
<span class="line"><span>        String cookieValue = CookieUtils.getCookieValue(request, cookieName);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        try {</span></span>
<span class="line"><span>            // 用公钥解析cookie中携带的token信息</span></span>
<span class="line"><span>            JwtUtils.parseToken(configuration.getPublicKey(), cookieValue);</span></span>
<span class="line"><span>            return true;</span></span>
<span class="line"><span>        } catch (Exception e) {</span></span>
<span class="line"><span>            throw new CommonException(CodeStatus.FORBIDDEN);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="还有最重要的一步" tabindex="-1"><a class="header-anchor" href="#还有最重要的一步"><span>还有最重要的一步</span></a></h2><p>当然是将我们的拦截器交由给Spring管理, 不然不会生效</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class WebConfiguration implements WebMvcConfigurer {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public LoginInterceptor loginInterceptor() {</span></span>
<span class="line"><span>        return new LoginInterceptor();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void addInterceptors(InterceptorRegistry registry) {</span></span>
<span class="line"><span>        registry.addInterceptor(loginInterceptor()).addPathPatterns(&quot;/**&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const d=e(l,[["render",p],["__file","200812_SpringBoot实现自己的拦截器.html.vue"]]),o=JSON.parse(`{"path":"/archive/blog/2020/200812_SpringBoot%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"SpringBoot实现自己的拦截器","lang":"zh-CN","frontmatter":{"title":"SpringBoot实现自己的拦截器","date":"2020-08-12T13:14:02.000Z","draft":false,"category":["关于技术"],"tag":["SpringBoot"],"description":"在 Web 开发中，我们经常需要对请求拦截并做一些动作，比如日志记录、权限检测或者性能检测等 HandlerInterceptor SpringMVC中提供了HandlerInterceptor接口, 我们来大致看一下它的源码 ( 省略参数和异常以方便阅读 ) HandlerInterceptorAdapter 有时候我们只需要在请求前拦截, 也就是只...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/archive/blog/2020/200812_SpringBoot%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"SpringBoot实现自己的拦截器"}],["meta",{"property":"og:description","content":"在 Web 开发中，我们经常需要对请求拦截并做一些动作，比如日志记录、权限检测或者性能检测等 HandlerInterceptor SpringMVC中提供了HandlerInterceptor接口, 我们来大致看一下它的源码 ( 省略参数和异常以方便阅读 ) HandlerInterceptorAdapter 有时候我们只需要在请求前拦截, 也就是只..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2020-08-12T13:14:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot实现自己的拦截器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-12T13:14:02.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"HandlerInterceptor","slug":"handlerinterceptor","link":"#handlerinterceptor","children":[]},{"level":2,"title":"HandlerInterceptorAdapter","slug":"handlerinterceptoradapter","link":"#handlerinterceptoradapter","children":[]},{"level":2,"title":"权限检测场景","slug":"权限检测场景","link":"#权限检测场景","children":[]},{"level":2,"title":"还有最重要的一步","slug":"还有最重要的一步","link":"#还有最重要的一步","children":[]}],"git":{"createdTime":1667915485000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"1425795337@qq.com","commits":1,"url":"https://github.com/logycoconut"},{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":4,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"archive/blog/2020/200812_SpringBoot实现自己的拦截器.md","localizedDate":"2020年8月12日","autoDesc":true}`);export{d as comp,o as data};
