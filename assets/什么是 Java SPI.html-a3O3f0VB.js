import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as a,o as t}from"./app-uPjeah--.js";const l={};function n(r,i){return t(),s("div",null,i[0]||(i[0]=[a(`<blockquote><p>【10 分钟让你彻底明白 Java SPI，附实例代码演示】 <a href="https://www.bilibili.com/video/BV1RY4y1v7mN" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1RY4y1v7mN</a></p></blockquote><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p><code>SPI</code> 全称 <code>Service Provider Interface</code></p><p>由三个组件构成</p><ul><li>Service</li><li>Service Provider</li><li>ServiceLoader</li></ul><p>ServiceLoader（服务发现&amp;加载） --&gt; 加载 Service Provider</p><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h3><p><code>JDBC</code>（<code>Java DataBase Connectivity</code>）</p><p>一开始我们是这么使用数据库驱动的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;oracle.jdbc.driver.OracleDriver&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那能不能直接把这些写在配置文件中呢？那就不用修改代码了</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">app.yaml</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    driver-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.mysql.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>似乎还是有点麻烦，因为还得记住这些驱动的名字<br> 能不能让驱动提供方提供配置文件（比方说将其放在 <code>Jar</code> 包中），我们约定好方式统一去一个地方加载这些配置呢？</p><p>呐，这就是 <code>SPI</code> 啦</p><h3 id="java-spi-的三大规范要素" tabindex="-1"><a class="header-anchor" href="#java-spi-的三大规范要素"><span>Java SPI 的三大规范要素</span></a></h3><h4 id="规范的配置文件" tabindex="-1"><a class="header-anchor" href="#规范的配置文件"><span>规范的配置文件</span></a></h4><ul><li><p>文件路径<br> 必须在 <code>Jar</code> 包中的 <code>META-INF/services</code> 目录下</p></li><li><p>文件名称<br><code>Service</code> 接口的全限定名</p></li><li><p>文件内容<br><code>Service</code> 实现类（即 <code>Service Provider</code>）的全限定名<br> 如果有多个实现类，那么每一个实现类在文件中单独占据一行</p></li></ul><h4 id="service-provider-类必须有无参的构造方法" tabindex="-1"><a class="header-anchor" href="#service-provider-类必须有无参的构造方法"><span><code>Service Provider</code> 类必须有无参的构造方法</span></a></h4><p>因为需要通过反射技术实例化它时，是不带参数的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="保证能加载到配置文件和-service-provider-类" tabindex="-1"><a class="header-anchor" href="#保证能加载到配置文件和-service-provider-类"><span>保证能加载到配置文件和 Service Provider 类</span></a></h4><ul><li>将 <code>Service Provider</code> 的 <code>Jar</code> 包放到 <code>classpath</code> 中（常用）</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;mysql&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;mysql-connector-java&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;8.0.28&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-spi-与-springboot-自动配置" tabindex="-1"><a class="header-anchor" href="#java-spi-与-springboot-自动配置"><span>Java SPI 与 SpringBoot 自动配置</span></a></h3>`,24)]))}const p=e(l,[["render",n],["__file","什么是 Java SPI.html.vue"]]),o=JSON.parse(`{"path":"/project/Interview/Java%20%E5%9F%BA%E7%A1%80/%E4%BB%80%E4%B9%88%E6%98%AF%20Java%20SPI.html","title":"什么是 Java SPI","lang":"zh-CN","frontmatter":{"title":"什么是 Java SPI","tag":["Java","SPI"],"description":"【10 分钟让你彻底明白 Java SPI，附实例代码演示】 https://www.bilibili.com/video/BV1RY4y1v7mN 简介 SPI 全称 Service Provider Interface 由三个组件构成 Service Service Provider ServiceLoader ServiceLoader（服务发现...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/project/Interview/Java%20%E5%9F%BA%E7%A1%80/%E4%BB%80%E4%B9%88%E6%98%AF%20Java%20SPI.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"什么是 Java SPI"}],["meta",{"property":"og:description","content":"【10 分钟让你彻底明白 Java SPI，附实例代码演示】 https://www.bilibili.com/video/BV1RY4y1v7mN 简介 SPI 全称 Service Provider Interface 由三个组件构成 Service Service Provider ServiceLoader ServiceLoader（服务发现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"SPI"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是 Java SPI\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":3,"title":"Java SPI 的三大规范要素","slug":"java-spi-的三大规范要素","link":"#java-spi-的三大规范要素","children":[{"level":4,"title":"规范的配置文件","slug":"规范的配置文件","link":"#规范的配置文件","children":[]},{"level":4,"title":"Service Provider 类必须有无参的构造方法","slug":"service-provider-类必须有无参的构造方法","link":"#service-provider-类必须有无参的构造方法","children":[]},{"level":4,"title":"保证能加载到配置文件和 Service Provider 类","slug":"保证能加载到配置文件和-service-provider-类","link":"#保证能加载到配置文件和-service-provider-类","children":[]}]},{"level":3,"title":"Java SPI 与 SpringBoot 自动配置","slug":"java-spi-与-springboot-自动配置","link":"#java-spi-与-springboot-自动配置","children":[]}],"git":{"createdTime":1702895606000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":2,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.21,"words":363},"filePathRelative":"project/Interview/Java 基础/什么是 Java SPI.md","localizedDate":"2023年12月18日","autoDesc":true}`);export{p as comp,o as data};
