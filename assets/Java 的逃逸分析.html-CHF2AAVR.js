import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as n}from"./app-mbwvGqXF.js";const l={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<blockquote><p>请看原文: <a href="https://juejin.cn/post/6844903639308304397" target="_blank" rel="noopener noreferrer">深入理解Java中的逃逸分析</a></p></blockquote><p>Java 源代码变成计算机可执行的机器指令的过程中, 会经过两段编译</p><ol><li>将 .java 文件转化成 .class 文件</li><li>.class 文件转换成机器指令</li></ol><p>在新版 JDK 中, Java 代码的编译引入了 JIT 技术</p><p>当 JVM 发现某个方法、代码块运行特别频繁时, 会认定这是 &quot;热点代码&quot;, JIT 就会将这部分代码翻译成机器码, 并进行优化, 然后再把翻译后的机器码缓存起来, 以备下次使用</p><h3 id="逃逸分析" tabindex="-1"><a class="header-anchor" href="#逃逸分析"><span>逃逸分析</span></a></h3><p>编译器可以做如下优化</p><ul><li><p>同步省略</p><p>如果一个对象被发现只能从一个线程被访问到, 那么对于这个对象的操作可以不考虑同步</p></li><li><p>将堆分配转化为栈分配</p><p>如果一个对象在方法中被分配, 不会逃逸出方法, 那么就可能被优化成栈上分配</p></li><li><p>分离对象 / 标量替换</p><blockquote><p>标量: 指一个无法再分解成更小的数据的数据<br> 可以将 Java 对象理解成一个聚合量</p></blockquote><p>如果对象不会逃逸, JIT 就不会创建对象, 而是直接使用标量</p><p>例如</p></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// before</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> alloc</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() { </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Point</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> point </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Point（1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">）</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;point.x=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;; point.y=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// after</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> alloc</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">   System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;point.x=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;; point.y=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">y);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const r=s(l,[["render",e],["__file","Java 的逃逸分析.html.vue"]]),o=JSON.parse(`{"path":"/resource/code/01_java/05_JVM/Java%20%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.html","title":"Java 的逃逸分析","lang":"zh-CN","frontmatter":{"title":"Java 的逃逸分析","tag":["JVM","逃逸分析"],"description":"请看原文: 深入理解Java中的逃逸分析 Java 源代码变成计算机可执行的机器指令的过程中, 会经过两段编译 将 .java 文件转化成 .class 文件 .class 文件转换成机器指令 在新版 JDK 中, Java 代码的编译引入了 JIT 技术 当 JVM 发现某个方法、代码块运行特别频繁时, 会认定这是 \\"热点代码\\", JIT 就会将这部...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/code/01_java/05_JVM/Java%20%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Java 的逃逸分析"}],["meta",{"property":"og:description","content":"请看原文: 深入理解Java中的逃逸分析 Java 源代码变成计算机可执行的机器指令的过程中, 会经过两段编译 将 .java 文件转化成 .class 文件 .class 文件转换成机器指令 在新版 JDK 中, Java 代码的编译引入了 JIT 技术 当 JVM 发现某个方法、代码块运行特别频繁时, 会认定这是 \\"热点代码\\", JIT 就会将这部..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:tag","content":"逃逸分析"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 的逃逸分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"逃逸分析","slug":"逃逸分析","link":"#逃逸分析","children":[]}],"git":{"createdTime":1692281994000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":4,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"resource/code/01_java/05_JVM/Java 的逃逸分析.md","localizedDate":"2023年8月17日","autoDesc":true}`);export{r as comp,o as data};
