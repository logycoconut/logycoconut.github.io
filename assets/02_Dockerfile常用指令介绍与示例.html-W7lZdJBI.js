import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as a,o as n}from"./app-CAtmO8tN.js";const t={};function l(d,i){return n(),s("div",null,[...i[0]||(i[0]=[a(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>💡 Dockerfile 是一个用来构建镜像的文本文件, 文本内容包含了一条条构建镜像所需的指令和说明</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="举个🌰" tabindex="-1"><a class="header-anchor" href="#举个🌰"><span>举个🌰</span></a></h2><h3 id="构建一个-nginx-镜像-并初始化一个-index-文件" tabindex="-1"><a class="header-anchor" href="#构建一个-nginx-镜像-并初始化一个-index-文件"><span>构建一个 <code>nginx</code> 镜像，并初始化一个 <code>index</code> 文件</span></a></h3><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定基础镜像为 nginx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在上层基础之上在 /usr/share/nginx/html 目录增加一个 index.html 文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;这是一个本地构建的nginx镜像&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; /usr/share/nginx/html/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建一个-java8-镜像" tabindex="-1"><a class="header-anchor" href="#构建一个-java8-镜像"><span>构建一个 <code>Java8</code> 镜像</span></a></h3><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定基础镜像为 java8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java:8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 拷贝当前目录到镜像中的 /var/my/java 目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . /var/my/java  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置工作目录为 /var/my/java</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /var/my/java  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 编译 Hello.java 文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> javac Hello.java</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 容器启动时运行 java Hello</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指令作用" tabindex="-1"><a class="header-anchor" href="#指令作用"><span>指令作用</span></a></h2><table><thead><tr><th>指令名</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td></tr><tr><td>MAINTAINER</td><td>指定维护者信息</td></tr><tr><td>RUN</td><td>想在容器里执行什么命令</td></tr><tr><td>ADD</td><td>给容器一点启动资金</td></tr><tr><td>WORKDIR</td><td>指定当前工作目录，类似 CD</td></tr><tr><td>VOLUME</td><td>设置卷，挂载主机目录</td></tr><tr><td>EXPOSE</td><td>打开</td></tr><tr><td>CMD</td><td>容器启动后要干的事情</td></tr></tbody></table><h3 id="上下文路径" tabindex="-1"><a class="header-anchor" href="#上下文路径"><span>上下文路径</span></a></h3><p><code>docker build -t nginx:v .</code></p><p>由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置</p><p>上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢</p><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from"><span>FROM</span></a></h3><p>指定基础镜像，后续的操作都是基于基础镜像（ <code>Dockerfile</code>文件必须以 <code>FROM</code> 作为第一行）</p><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label"><span>LABEL</span></a></h3><p>为镜像添加标签</p><p><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></p><p>例如 <code>LABEL author=&quot;logycoconut&quot; version=0.1</code></p><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>RUN</span></a></h3><p><code>RUN</code> 指令有两种形式</p><ul><li><code>RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)</code></li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li></ul><p>每一个 <code>RUN</code> 指令都会构建新的一层</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 应该避免下面这种形式，会产生非常多层的镜像，增加构建部署的时间</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apk upgrade</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apk add python3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 推荐的形式，以 &amp;&amp; 符号连接命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> apk upgrade &amp;&amp; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">\\\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    apk add python3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>CMD</span></a></h3><p><code>CMD</code> 命令类似于 <code>RUN</code>，不同点在于运行的时间点</p><ul><li><code>CMD</code> 在docker run 时运行</li><li><code>RUN</code> 是在 docker build 时运行</li></ul><p><code>CMD</code> 命令有三种形式</p><ul><li><p><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> (<em>exec</em> form, this is the preferred form)</p></li><li><p><code>CMD command param1 param2</code> (<em>shell</em> form)</p></li><li><p><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (作为 <em>ENTRYPOINT 的默认参数</em>)</p></li></ul><h3 id="copy、add" tabindex="-1"><a class="header-anchor" href="#copy、add"><span>COPY、ADD</span></a></h3><p><em>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）</em></p><p><code>COPY</code> 命令有两种形式</p><ul><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</code></li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p><strong>注意：</strong></p><ol><li>source路径必须在构建的上下文之内。不能使用 <code>COPY ../a/b</code>的形式，因为docker构建的第一步是将上下文路径发送到docker引擎</li><li>如果source是目录，则会复制目录的全部内容，包括文件系统元数据</li></ol><p><strong>ADD指令与CPOY指令对比</strong></p><ul><li><p>ADD 的优点：在执行 <code>&lt;src&gt;</code> 为 tar 压缩文件，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <code>&lt;dest&gt;</code></p></li><li><p>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</p></li></ul><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env"><span>ENV</span></a></h3><p>设置环境变量, <code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Dockerfile 设置了 VERSION=0.1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VERSION=0.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在镜像启动的容器中 echo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">root@caa46eb11ab6:/# echo $VERSION</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arg" tabindex="-1"><a class="header-anchor" href="#arg"><span>ARG</span></a></h3><p><code>ARG</code> 与<code>ENV</code> 作用一致，作用域不同</p><p>ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://docs.docker.com/engine/reference/builder/#environment-replacement" target="_blank" rel="noopener noreferrer">Docker官方文档</a></li><li><a href="https://www.cnblogs.com/edisonchou/p/dockerfile_inside_introduction.html" target="_blank" rel="noopener noreferrer">你必须知道的Dockerfile - Edison Zhou</a></li><li><a href="https://www.yiibai.com/docker/docker-dockerfile.html" target="_blank" rel="noopener noreferrer">Dockerfile示例与解析 - 易百教程</a></li></ul>`,45)])])}const c=e(t,[["render",l]]),h=JSON.parse(`{"path":"/resource/code/09_tools/01_Docker/02_Dockerfile%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%A4%BA%E4%BE%8B.html","title":"Dockerfile 常用指令介绍与示例","lang":"zh-CN","frontmatter":{"title":"Dockerfile 常用指令介绍与示例","date":"2021-06-06T00:00:00.000Z","tag":["Docker"],"description":"举个🌰 构建一个 nginx 镜像，并初始化一个 index 文件 构建一个 Java8 镜像 指令作用 上下文路径 docker build -t nginx:v . 由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile 常用指令介绍与示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"],["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/code/09_tools/01_Docker/02_Dockerfile%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%A4%BA%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Dockerfile 常用指令介绍与示例"}],["meta",{"property":"og:description","content":"举个🌰 构建一个 nginx 镜像，并初始化一个 index 文件 构建一个 Java8 镜像 指令作用 上下文路径 docker build -t nginx:v . 由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2021-06-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}]]},"git":{"createdTime":1668528927000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"1425795337@qq.com","commits":9,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":3.43,"words":1030},"filePathRelative":"resource/code/09_tools/01_Docker/02_Dockerfile常用指令介绍与示例.md","autoDesc":true}`);export{c as comp,h as data};
