import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as c}from"./app-uPjeah--.js";const n={};function a(i,t){return c(),o("div",null,t[0]||(t[0]=[r("p",null,"数据库建表时，对于一些可填可不填的字段，我们应该尽量把它设置为 NOT NULL。这种做法即可以提高性能，又可以在很大程度上避免空指针类的问题，好处颇多。 1.节省空间 NULL 列需要更多的存储空间：需要一个额外字节作为判断是否为 NULL 的标志位。 2.空指针 查询时，可以在一定程度上减少 NullPointerException。 3.减少因为空值而出现的计算错误 如果有 Null column 存在的情况下，count(NULL column) 需要格外注意，NULL 值不会参与统计。 4.索引 含有空值的列很难进行查询优化，而且对表索引时不会存储 NULL 值的。所以如果索引的字段可以为 NULL值，索引的效率会下降。因为它们使得索引、索引的统计信息以及比较运算更加复杂。 可以用0、一个特殊的值或者一个空串代替 NULL值。 5.使用 != ，NOT IN 的情况 NOT IN 、!= 等负向条件查询在有 NULL 值的情况下，返回永远为空结果，查询容易出错。",-1)]))}const m=e(n,[["render",a],["__file","数据库攻略.html.vue"]]),s=JSON.parse(`{"path":"/resource/staged/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%BB%E7%95%A5.html","title":"to be perfected","lang":"zh-CN","frontmatter":{"title":"to be perfected","index":false,"date":"2023-02-21T00:00:00.000Z","tag":[],"description":"数据库建表时，对于一些可填可不填的字段，我们应该尽量把它设置为 NOT NULL。这种做法即可以提高性能，又可以在很大程度上避免空指针类的问题，好处颇多。 1.节省空间 NULL 列需要更多的存储空间：需要一个额外字节作为判断是否为 NULL 的标志位。 2.空指针 查询时，可以在一定程度上减少 NullPointerException。 3.减少因为...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/staged/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%BB%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"to be perfected"}],["meta",{"property":"og:description","content":"数据库建表时，对于一些可填可不填的字段，我们应该尽量把它设置为 NOT NULL。这种做法即可以提高性能，又可以在很大程度上避免空指针类的问题，好处颇多。 1.节省空间 NULL 列需要更多的存储空间：需要一个额外字节作为判断是否为 NULL 的标志位。 2.空指针 查询时，可以在一定程度上减少 NullPointerException。 3.减少因为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:published_time","content":"2023-02-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"to be perfected\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[],"git":{"createdTime":1676991217000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":7,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.04,"words":311},"filePathRelative":"resource/staged/数据库攻略.md","localizedDate":"2023年2月21日","autoDesc":true}`);export{m as comp,s as data};
