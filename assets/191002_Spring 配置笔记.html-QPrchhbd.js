import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as a,o as i}from"./app-DfvBXUGl.js";const l={};function t(o,n){return i(),s("div",null,n[0]||(n[0]=[a(`<blockquote><p>忘记的时候翻一翻</p></blockquote><h2 id="xml配置" tabindex="-1"><a class="header-anchor" href="#xml配置"><span><strong>XML配置</strong></span></a></h2><h3 id="ioc容器" tabindex="-1"><a class="header-anchor" href="#ioc容器"><span><strong>IOC容器</strong></span></a></h3><p><em>使用bean标签，除了id和class属性之外没有其他属性和标签时，采用的就是默认构造函数创建bean对象<br> 如果类中没有默认构造函数，则无法创建</em></p><ul><li>默认构造函数创建</li></ul><p><code>&lt;bean id=&quot;exampleService&quot; class=&quot;com.hall.service.impl.ExampleService&quot;&gt;&lt;/bean&gt;</code></p><ul><li>使用某个类(例如工厂)中的方法创建对象</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;bean id=&quot;instanceFactory&quot; class=&quot;com.hall.factory.InstanceFactory&quot;&gt;&lt;/bean&gt;</span></span>
<span class="line"><span>&lt;bean id=&quot;exampleService&quot; factory-bean=&quot;instanceFactory&quot; factory-method=&quot;getExampleService&quot;&gt;&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>工厂中的静态方法创建对象（使用某个类中的静态方法创建对象）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;bean id=&quot;accountService&quot; class=&quot;com.hall.factory.StaticFactory&quot; factory-method=&quot;getExampleService&quot;&gt;&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="di依赖注入" tabindex="-1"><a class="header-anchor" href="#di依赖注入"><span><strong>DI依赖注入</strong></span></a></h3><h4 id="能注入的数据类型" tabindex="-1"><a class="header-anchor" href="#能注入的数据类型"><span><strong>能注入的数据类型</strong></span></a></h4><ul><li>基本类型和String类型</li><li>其他的bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul><h4 id="注入方式" tabindex="-1"><a class="header-anchor" href="#注入方式"><span><strong>注入方式</strong></span></a></h4><ul><li>使用构造函数提供</li></ul><p>使用constructor-arg标签</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;bean id=&quot;exampleService&quot; class=&quot;com.hall.service.impl.ExampleService&quot;&gt;</span></span>
<span class="line"><span>    &lt;constructor-arg index=&quot;0&quot; value=&quot;张三&quot;&gt;&lt;/constructor-arg&gt;</span></span>
<span class="line"><span>    &lt;constructor-arg type=&quot;java.lang.Integer&quot; value=&quot;3&quot;&gt;&lt;/constructor-arg&gt;</span></span>
<span class="line"><span>    &lt;constructor-arg name=&quot;birthday&quot; ref=&quot;now&quot;&gt;&lt;/constructor-arg&gt;</span></span>
<span class="line"><span>&lt;/bean&gt;</span></span>
<span class="line"><span>&lt;bean id=&quot;now&quot; class=&quot;java.util.Date&quot;&gt;&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用set方法提供</li></ul><p>使用property标签，需要提供setter方法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;bean id=&quot;exampleService&quot; class=&quot;com.hall.service.impl.ExampleService&quot;&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;age&quot; value=&quot;15&quot;&gt;&lt;/property&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;birthday&quot; ref=&quot;now&quot;&gt;&lt;/property&gt;</span></span>
<span class="line"><span>&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用注解提供</li></ul><h3 id="aop面向切面" tabindex="-1"><a class="header-anchor" href="#aop面向切面"><span><strong>AOP面向切面</strong></span></a></h3><h4 id="配置aop" tabindex="-1"><a class="header-anchor" href="#配置aop"><span><strong>配置AOP</strong></span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;!--开始aop的配置--&gt;</span></span>
<span class="line"><span>&lt;aop:config&gt;</span></span>
<span class="line"><span>    &lt;!--配置切面,指定通知类的bean的id--&gt;</span></span>
<span class="line"><span>    &lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt; </span></span>
<span class="line"><span>        &lt;!--配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span>
<span class="line"><span>        &lt;aop:before method=&quot;printLog&quot; pointcut=&quot;execution(* com.hall.service.impl.*.*(..))&quot;&gt;&lt;/aop:before&gt;</span></span>
<span class="line"><span>    &lt;/aop:aspect&gt;</span></span>
<span class="line"><span>&lt;/aop:config&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="切入点表达式" tabindex="-1"><a class="header-anchor" href="#切入点表达式"><span><strong>切入点表达式</strong></span></a></h4><ul><li><strong>表达式</strong> 访问修饰符 返回值 全类名.方法名(参数类别)</li><li><strong>标准的表达式写法</strong> <code> public void com.hall.service.impl.ExampleService.saveExample()</code></li></ul><blockquote><ul><li>访问修饰符可以省略</li><li>返回值可以使用通配符，表示任意返回值</li><li>包名可以使用通配符表示，表示任意包，但是有几级包，就需要写几个*.</li><li>包名可以使用..表示当前包及其子包</li><li>参数列表：</li></ul></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>* 可以直接写数据类型：基本类型直接写名称\`int\`、引用类型写包名.类名的方式 \`java.lang.String\`</span></span>
<span class="line"><span>* 可以使用通配符表示任意类型，但是必须有参数</span></span>
<span class="line"><span>* 可以使用..表示有无参数均可，有参数可以是任意类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>全通配写法</strong> <code>* *..*.*(..)</code></li><li><strong>实际开发中切入点表达式的通常写法</strong> 切到业务层实现类下的所有方法</li></ul><h3 id="spring事务" tabindex="-1"><a class="header-anchor" href="#spring事务"><span><strong>Spring事务</strong></span></a></h3><ul><li>配置事务管理器</li><li>配置事务的通知</li><li>建立事务通知和切入点表达式的对应关系</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> &lt;!-- 1. 配置事务管理器 --&gt;</span></span>
<span class="line"><span>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span></span>
<span class="line"><span>&lt;/bean&gt;</span></span>
<span class="line"><span>&lt;!-- 2. 配置事务的通知 --&gt;</span></span>
<span class="line"><span>&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span></span>
<span class="line"><span>    &lt;!--配置事务的属性</span></span>
<span class="line"><span>            isolation=&quot;&quot;    用于指定事务的隔离级别 默认是DEFAULT 表示使用数据库的默认隔离级别</span></span>
<span class="line"><span>            propagation=&quot;&quot;      用于指定事务的传播行为 默认是REQUIRED 表示一定会有事务，增删改的选择，查询方法可以选择SUPPORTS</span></span>
<span class="line"><span>            read-only=&quot;&quot;        用于指定事务是否只读 只有查询方法才能设置为true 默认是false 表示读写</span></span>
<span class="line"><span>            timeout=&quot;&quot;      用于指定事务的超时时间</span></span>
<span class="line"><span>            rollback-for=&quot;&quot;    用于指定一个异常， 当产生该异常是，事务回滚，其他异常不回滚，没有默认值则全都回滚</span></span>
<span class="line"><span>            no-rollback-for=&quot;&quot;  用于指定一个异常，当产生该异常是，事务不回滚，其他异常回滚，没有默认值则全都回滚</span></span>
<span class="line"><span>    --&gt;</span></span>
<span class="line"><span>    &lt;tx:attributes&gt;</span></span>
<span class="line"><span>        &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot; /&gt;</span></span>
<span class="line"><span>        &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;</span></span>
<span class="line"><span>    &lt;/tx:attributes&gt;</span></span>
<span class="line"><span>&lt;/tx:advice&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;!-- 3. 配置aop --&gt;</span></span>
<span class="line"><span>&lt;aop:config&gt;</span></span>
<span class="line"><span>    &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* com.hall.service.impl.*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;</span></span>
<span class="line"><span>    &lt;!--建立切入点表达式和事务通知的对应关系--&gt;</span></span>
<span class="line"><span>    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pt&quot; &gt;&lt;/aop:advisor&gt;</span></span>
<span class="line"><span>&lt;/aop:config&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解配置" tabindex="-1"><a class="header-anchor" href="#注解配置"><span><strong>注解配置</strong></span></a></h2><ul><li><strong>用于创建对象的</strong></li></ul><p><code>@Component(value=&quot;beanId&quot;)</code></p><p><code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>的作用和<code>@Component</code>的作用一样</p><p><code>@Bean(&quot;beanName&quot;)</code> 将对象放入容器</p><ul><li><strong>用于注入数据的</strong></li></ul><p><code>@Autowired</code><br> 自动按照类型注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功，否则根据名字匹配</p><p><code>@Qualifier</code><br> 和<code>@Autowired</code>在类型注入的基础上按照名称注入</p><p><code>@Resource</code><br> 默认按照注解对象的名称注入</p><p><code>@Value</code><br> 用于注入基本类型和String类型，可以使用spring的EL表达式<code>\${表达式}</code></p><ul><li><strong>用于配置事务的</strong></li></ul><p><code>@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)</code><br> 使用前需要先在容器中配置事务管理器</p><ul><li><strong>用于配置Configuration的</strong></li></ul><p><code>@Configuration</code><br> 标识spring的配置类，可有可无</p><p><code>@ComponentScan({&quot;com.hall&quot;})</code><br> 标识要扫描的包</p><p><code>@Import(JdbcConfig.class)</code><br> 导入其他配置类，例如数据库连接、事务管理</p><p><code>@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</code><br> 导入配置文件</p><ul><li><strong>用于Spring整合junit的</strong></li></ul><p><code>@RunWith(SpringJUnit4ClassRunner.class)</code><br> 用于替代原来的方法</p><p><code>@ContextConfiguration(classes=SpringConfiguration.class)</code><br> 用于导入Spring的配置类或配置文件</p><ul><li><strong>用于配置AOP的</strong></li></ul><p><code>@Aspect</code><br> 标注切面</p><p><code>@Pointcut</code><br> 配置切入点表达式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Pointcut(&quot;execution(* com.hall.service.impl.*.*(..))&quot;)</span></span>
<span class="line"><span>private void pt(){}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Before</code>、<code>@AfterReturning</code>、<code>@AfterThrowing</code>、<code>@After</code><br> 前置通知、后置通知、异常通知、最终通知</p><p><code>@Around</code><br> 环绕通知</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Around(&quot;pt()&quot;)</span></span>
<span class="line"><span>public Object aroundAdvice(ProceedingJoinPoint joinPoint) {</span></span>
<span class="line"><span>    Object rtnValue = null;</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        System.out.println(&quot;前置通知&quot;);</span></span>
<span class="line"><span>        rtnValue = joinPoint.proceed(joinPoint.getArgs());</span></span>
<span class="line"><span>        System.out.println(&quot;后置通知&quot;);</span></span>
<span class="line"><span>        return rtnValue;</span></span>
<span class="line"><span>    } catch (Throwable throwable) {</span></span>
<span class="line"><span>        System.out.println(&quot;异常通知&quot;);</span></span>
<span class="line"><span>        throw new RuntimeException(throwable.getMessage());</span></span>
<span class="line"><span>    } finally {</span></span>
<span class="line"><span>        System.out.println(&quot;最终通知&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="joinpoint类型的几个方法" tabindex="-1"><a class="header-anchor" href="#joinpoint类型的几个方法"><span>JoinPoint类型的几个方法</span></a></h3><p><code>Object[] getArgs()</code>：返回执行目标方法时的参数</p><p><code>Signature getSignature()</code>：返回被增强的方法的相关信息。</p><p><code>Object getTarget()</code>：返回被织入advice的目标对象</p><p><code>Object getThis()</code>：返回AOP框架为目标对象生成的代理对象</p>`,64)]))}const c=e(l,[["render",t],["__file","191002_Spring 配置笔记.html.vue"]]),d=JSON.parse(`{"path":"/archive/blog/2019/191002_Spring%20%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0.html","title":"Spring 配置笔记","lang":"zh-CN","frontmatter":{"title":"Spring 配置笔记","date":"2019-10-02T12:03:16.000Z","draft":false,"category":["关于技术"],"tag":["Spring"],"description":"忘记的时候翻一翻 XML配置 IOC容器 使用bean标签，除了id和class属性之外没有其他属性和标签时，采用的就是默认构造函数创建bean对象 如果类中没有默认构造函数，则无法创建 默认构造函数创建 <bean id=\\"exampleService\\" class=\\"com.hall.service.impl.ExampleService\\"></b...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/archive/blog/2019/191002_Spring%20%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Spring 配置笔记"}],["meta",{"property":"og:description","content":"忘记的时候翻一翻 XML配置 IOC容器 使用bean标签，除了id和class属性之外没有其他属性和标签时，采用的就是默认构造函数创建bean对象 如果类中没有默认构造函数，则无法创建 默认构造函数创建 <bean id=\\"exampleService\\" class=\\"com.hall.service.impl.ExampleService\\"></b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2019-10-02T12:03:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 配置笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-02T12:03:16.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"XML配置","slug":"xml配置","link":"#xml配置","children":[{"level":3,"title":"IOC容器","slug":"ioc容器","link":"#ioc容器","children":[]},{"level":3,"title":"DI依赖注入","slug":"di依赖注入","link":"#di依赖注入","children":[{"level":4,"title":"能注入的数据类型","slug":"能注入的数据类型","link":"#能注入的数据类型","children":[]},{"level":4,"title":"注入方式","slug":"注入方式","link":"#注入方式","children":[]}]},{"level":3,"title":"AOP面向切面","slug":"aop面向切面","link":"#aop面向切面","children":[{"level":4,"title":"配置AOP","slug":"配置aop","link":"#配置aop","children":[]},{"level":4,"title":"切入点表达式","slug":"切入点表达式","link":"#切入点表达式","children":[]}]},{"level":3,"title":"Spring事务","slug":"spring事务","link":"#spring事务","children":[]}]},{"level":2,"title":"注解配置","slug":"注解配置","link":"#注解配置","children":[{"level":3,"title":"JoinPoint类型的几个方法","slug":"joinpoint类型的几个方法","link":"#joinpoint类型的几个方法","children":[]}]}],"git":{"createdTime":1667915485000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"1425795337@qq.com","commits":1,"url":"https://github.com/logycoconut"},{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":4,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":4.71,"words":1414},"filePathRelative":"archive/blog/2019/191002_Spring 配置笔记.md","localizedDate":"2019年10月2日","autoDesc":true}`);export{c as comp,d as data};
