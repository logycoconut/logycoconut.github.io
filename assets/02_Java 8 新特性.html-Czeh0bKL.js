import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as e}from"./app-DfvBXUGl.js";const n={};function l(h,i){return e(),a("div",null,i[0]||(i[0]=[t(`<h3 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式"><span><strong>Lambda 表达式</strong></span></a></h3><p>也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 语法格式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">( param ) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> expression 或 ( param ) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用"><span><strong>方法引用</strong></span></a></h3><p>方法引用提供了非常有用的语法，可以直接引用已有 Java 类或对象（实例）的方法或构造器。与 Lambda 联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码</p><ul><li><p><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法</p></li><li><p><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 集合元素通过管道的方式处理并得到最终结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--------------------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">       +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stream of elements </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">----</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">sorted</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">collect</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--------------------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">       +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-+</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">   +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="date-time-api" tabindex="-1"><a class="header-anchor" href="#date-time-api"><span><strong>Date Time API</strong></span></a></h3><p>加强对日期与时间的处理</p><h3 id="optional-类" tabindex="-1"><a class="header-anchor" href="#optional-类"><span><strong>Optional 类</strong></span></a></h3><p>Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://www.runoob.com/java/java8-new-features.html" target="_blank" rel="noopener noreferrer">菜鸟教程 - Java8新特性</a></p>`,12)]))}const k=s(n,[["render",l],["__file","02_Java 8 新特性.html.vue"]]),d=JSON.parse(`{"path":"/resource/code/01_java/01_%E5%9F%BA%E7%A1%80/02_Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"Java 8 新特性","lang":"zh-CN","frontmatter":{"title":"Java 8 新特性","date":"2021-08-12T00:00:00.000Z","tag":["Java"],"description":"Lambda 表达式 也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中） 方法引用 方法引用提供了非常有用的语法，可以直接引用已有 Java 类或对象（实例）的方法或构造器。与 Lambda 联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码 默认方法 − 默认方法就是一个在接口里面有了一个实现的方法 Stre...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/resource/code/01_java/01_%E5%9F%BA%E7%A1%80/02_Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Java 8 新特性"}],["meta",{"property":"og:description","content":"Lambda 表达式 也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中） 方法引用 方法引用提供了非常有用的语法，可以直接引用已有 Java 类或对象（实例）的方法或构造器。与 Lambda 联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码 默认方法 − 默认方法就是一个在接口里面有了一个实现的方法 Stre..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2021-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 新特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":3,"title":"Lambda 表达式","slug":"lambda-表达式","link":"#lambda-表达式","children":[]},{"level":3,"title":"方法引用","slug":"方法引用","link":"#方法引用","children":[]},{"level":3,"title":"Date Time API","slug":"date-time-api","link":"#date-time-api","children":[]},{"level":3,"title":"Optional 类","slug":"optional-类","link":"#optional-类","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1676210890000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":8,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":0.88,"words":264},"filePathRelative":"resource/code/01_java/01_基础/02_Java 8 新特性.md","localizedDate":"2021年8月12日","autoDesc":true}`);export{k as comp,d as data};
