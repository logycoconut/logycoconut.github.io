import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,o as s}from"./app-mbwvGqXF.js";const a={};function l(r,e){return s(),n("div",null,e[0]||(e[0]=[t(`<blockquote><p>在微服务架构中，通常会使用 Feign 来进行服务间的相互调用，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路</p><p>我们假设以下场景，如果服务提供方突然宕机或者出现网络问题，那消费方就会迟迟收不到回应，处理的线程得不到释放，随着请求的增加，服务器的资源也会逐渐耗尽，导致服务瘫痪</p><p>因为服务间的依赖性，整个微服务体系就会发生雪崩</p></blockquote><p>Hystix 应运而生，它可以在服务提供方故障的时候，隔离远程服务，快速响应结果，防止出现级联失败</p><h2 id="在-feign-上使用熔断器" tabindex="-1"><a class="header-anchor" href="#在-feign-上使用熔断器"><span>在 Feign 上使用熔断器</span></a></h2><p>在不使用 Feign 的前提下也是可以使用 Hystrix 的，需要的可以自行了解，本文介绍的是 Feign 和 Hystrix 结合使用的情况</p><ol><li>开启 Hystrix 配置</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>feign:</span></span>
<span class="line"><span>  hystrix:</span></span>
<span class="line"><span>    enabled: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>为 client 指定一个失败回调的类</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@FeignClient(value = &quot;feign-provider&quot;, path = &quot;user&quot;, fallback = ProviderClientFallback.class)</span></span>
<span class="line"><span>public interface ProviderClient extends ProviderApi { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>当发生服务熔断或者降级的情况时，会返回回调类中相同签名的方法的值</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>public class ProviderClientFallback implements ProviderClient {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String info() {</span></span>
<span class="line"><span>        return &quot;调用失败&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关源码地址" tabindex="-1"><a class="header-anchor" href="#相关源码地址"><span>相关源码地址</span></a></h2><p>仅供参考</p><p><a href="https://github.com/logycoconut/Spring-Cloud-Notes/tree/master/feign" target="_blank" rel="noopener noreferrer">https://github.com/logycoconut/Spring-Cloud-Notes/tree/master/feign</a></p>`,13)]))}const c=i(a,[["render",l],["__file","201228_Spring Cloud 之熔断器 Hystrix.html.vue"]]),d=JSON.parse(`{"path":"/archive/blog/2020/201228_Spring%20Cloud%20%E4%B9%8B%E7%86%94%E6%96%AD%E5%99%A8%20Hystrix.html","title":"Spring Cloud 之熔断器 Hystrix","lang":"zh-CN","frontmatter":{"title":"Spring Cloud 之熔断器 Hystrix","date":"2020-12-28T08:25:28.000Z","draft":false,"category":["关于技术"],"tag":["SpringCloud"],"description":"在微服务架构中，通常会使用 Feign 来进行服务间的相互调用，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路 我们假设以下场景，如果服务提供方突然宕机或者出现网络问题，那消费方就会迟迟收不到回应，处理的线程得不到释放，随着请求的增加，服务器的资源也会逐渐耗尽，导致服务瘫痪 因为服务间的依赖性，整个微服务体系就会发生雪崩 Hys...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/archive/blog/2020/201228_Spring%20Cloud%20%E4%B9%8B%E7%86%94%E6%96%AD%E5%99%A8%20Hystrix.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Spring Cloud 之熔断器 Hystrix"}],["meta",{"property":"og:description","content":"在微服务架构中，通常会使用 Feign 来进行服务间的相互调用，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路 我们假设以下场景，如果服务提供方突然宕机或者出现网络问题，那消费方就会迟迟收不到回应，处理的线程得不到释放，随着请求的增加，服务器的资源也会逐渐耗尽，导致服务瘫痪 因为服务间的依赖性，整个微服务体系就会发生雪崩 Hys..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:published_time","content":"2020-12-28T08:25:28.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Cloud 之熔断器 Hystrix\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-28T08:25:28.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"在 Feign 上使用熔断器","slug":"在-feign-上使用熔断器","link":"#在-feign-上使用熔断器","children":[]},{"level":2,"title":"相关源码地址","slug":"相关源码地址","link":"#相关源码地址","children":[]}],"git":{"createdTime":1667915485000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"1425795337@qq.com","commits":1,"url":"https://github.com/logycoconut"},{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":4,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.22,"words":365},"filePathRelative":"archive/blog/2020/201228_Spring Cloud 之熔断器 Hystrix.md","localizedDate":"2020年12月28日","autoDesc":true}`);export{c as comp,d as data};
