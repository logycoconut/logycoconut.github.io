import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as n,d as t,b as i,e as p,f as r,r as o,o as d}from"./app-I68t-fKX.js";const c={};function u(g,e){const s=o("RouteLink");return d(),l("div",null,[e[3]||(e[3]=n("blockquote",null,[n("p",null,[i("我们知道 RestTemplate 可以通过 url 甚至服务名进行消费，但是如果对于服务提供者的每一个服务都需要写上这么一段代码，不仅麻烦还很容易产生混乱，所以本文将要介绍Spring Cloud中的服务调用组件"),n("code",null,"Feign")])],-1)),e[4]||(e[4]=n("h2",{id:"创建微服务中必要的三类角色",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建微服务中必要的三类角色"},[n("span",null,"创建微服务中必要的三类角色")])],-1)),n("p",null,[e[1]||(e[1]=i("注册中心之前在")),p(s,{to:"/blog/201222_SpringCloud%E4%B9%8BEureka%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0.html"},{default:r(()=>e[0]||(e[0]=[i("Spring Cloud 之 Eureka实现服务注册和发现")])),_:1}),e[2]||(e[2]=i("中有过介绍，这里就不再累述"))]),e[5]||(e[5]=t(`<p>服务提供者和消费者模块有些变动，接下来开始展示</p><h3 id="在服务提供服务中增加一个-api-模块" tabindex="-1"><a class="header-anchor" href="#在服务提供服务中增加一个-api-模块"><span>在服务提供服务中增加一个 Api 模块</span></a></h3><p>里面放置公用的部分，比如说entity、api接口等</p><p>一般都是由服务提供方编写，毕竟服务提供方最熟悉自己的接口</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public interface ProviderApi {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 提供服务模拟</span></span>
<span class="line"><span>     * @return String</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @GetMapping(&quot;info&quot;)</span></span>
<span class="line"><span>    String info();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费方增加feignclient" tabindex="-1"><a class="header-anchor" href="#消费方增加feignclient"><span>消费方增加FeignClient</span></a></h3><ol><li><p>在 Application 上增加 @EnableFeignClients 注解开启 Feign 支持</p></li><li><p>增加 UserClient，我们可以看到注解中有服务提供方的 application name， 以及请求地址的前缀</p></li></ol><p>前缀和 @GetMapping 中的值结合起来就是服务提供方的请求路径</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@FeignClient(value = &quot;feign-provider&quot;, path = &quot;user&quot;)</span></span>
<span class="line"><span>public interface ProviderClient extends ProviderApi { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>现在我们可以在服务中消费<code>feign-provider</code>的服务啦</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;user&quot;)</span></span>
<span class="line"><span>public class ConsumerController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private ProviderClient providerClient;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;consume&quot;)</span></span>
<span class="line"><span>    public String consume() {</span></span>
<span class="line"><span>        return providerClient.info();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关源码地址" tabindex="-1"><a class="header-anchor" href="#相关源码地址"><span>相关源码地址</span></a></h2><p>仅供参考</p><p><a href="https://github.com/logycoconut/Spring-Cloud-Notes/tree/master/feign" target="_blank" rel="noopener noreferrer">https://github.com/logycoconut/Spring-Cloud-Notes/tree/master/feign</a></p><p>​​<!-- +++++++++ 下面是引用式链接 +++++++++ --></p>`,15))])}const v=a(c,[["render",u],["__file","201225_Spring Cloud 之 OpenFeign的使用.html.vue"]]),b=JSON.parse(`{"path":"/archive/blog/2020/201225_Spring%20Cloud%20%E4%B9%8B%20OpenFeign%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"Spring Cloud 之 OpenFeign的使用","lang":"zh-CN","frontmatter":{"title":"Spring Cloud 之 OpenFeign的使用","date":"2020-12-25T05:28:54.000Z","draft":false,"category":["关于技术"],"tag":["SpringCloud"],"description":"我们知道 RestTemplate 可以通过 url 甚至服务名进行消费，但是如果对于服务提供者的每一个服务都需要写上这么一段代码，不仅麻烦还很容易产生混乱，所以本文将要介绍Spring Cloud中的服务调用组件Feign 创建微服务中必要的三类角色 注册中心之前在中有过介绍，这里就不再累述 服务提供者和消费者模块有些变动，接下来开始展示 在服务提供...","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/archive/blog/2020/201225_Spring%20Cloud%20%E4%B9%8B%20OpenFeign%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"logycoconut's k-lab"}],["meta",{"property":"og:title","content":"Spring Cloud 之 OpenFeign的使用"}],["meta",{"property":"og:description","content":"我们知道 RestTemplate 可以通过 url 甚至服务名进行消费，但是如果对于服务提供者的每一个服务都需要写上这么一段代码，不仅麻烦还很容易产生混乱，所以本文将要介绍Spring Cloud中的服务调用组件Feign 创建微服务中必要的三类角色 注册中心之前在中有过介绍，这里就不再累述 服务提供者和消费者模块有些变动，接下来开始展示 在服务提供..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:19:39.000Z"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:published_time","content":"2020-12-25T05:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:19:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Cloud 之 OpenFeign的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-25T05:28:54.000Z\\",\\"dateModified\\":\\"2025-02-11T14:19:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://logycoconut.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"创建微服务中必要的三类角色","slug":"创建微服务中必要的三类角色","link":"#创建微服务中必要的三类角色","children":[{"level":3,"title":"在服务提供服务中增加一个 Api 模块","slug":"在服务提供服务中增加一个-api-模块","link":"#在服务提供服务中增加一个-api-模块","children":[]},{"level":3,"title":"消费方增加FeignClient","slug":"消费方增加feignclient","link":"#消费方增加feignclient","children":[]}]},{"level":2,"title":"相关源码地址","slug":"相关源码地址","link":"#相关源码地址","children":[]}],"git":{"createdTime":1667915485000,"updatedTime":1739283579000,"contributors":[{"name":"logycoconut","username":"logycoconut","email":"1425795337@qq.com","commits":1,"url":"https://github.com/logycoconut"},{"name":"logycoconut","username":"logycoconut","email":"logycoconut@foxmail.com","commits":4,"url":"https://github.com/logycoconut"}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"archive/blog/2020/201225_Spring Cloud 之 OpenFeign的使用.md","localizedDate":"2020年12月25日","autoDesc":true}`);export{v as comp,b as data};
